"""
üîÑ MODULE RELOADER - Syst√®me de Hot-Reload pour Arsenal Bot
==========================================================

Syst√®me permettant de recharger les modules √† chaud sans red√©marrer le bot
- Rechargement automatique lors de modifications
- Interface de commandes pour reload manuel
- Gestion des erreurs et rollback
- Support pour tous les modules Arsenal

Cr√©√© pour Arsenal Bot V4 - Hot Reload System
"""

import os
import sys
import importlib
import importlib.util
import traceback
import asyncio
import time
import re
from datetime import datetime
from pathlib import Path
import discord
from discord.ext import commands
from discord import app_commands
from typing import Dict, List, Optional
import json

# Commandes slash pour le rechargement de modules
reload_group = app_commands.Group(name="reload", description="üîÑ Rechargement de modules √† chaud")

@reload_group.command(name="module", description="Recharge un module Arsenal sp√©cifique")
@app_commands.describe(module="Nom du module √† recharger")
@app_commands.choices(module=[
    app_commands.Choice(name="üèπ Profils Utilisateurs", value="user_profiles_system"),
    app_commands.Choice(name="üõ°Ô∏è AutoMod", value="automod_system"), 
    app_commands.Choice(name="üí∞ √âconomie", value="economy_system"),
    app_commands.Choice(name="üé´ Tickets", value="ticket_system"),
    app_commands.Choice(name="üéß Voice Hub", value="voice_hub_system"),
    app_commands.Choice(name="üÜò Syst√®me d'Aide", value="help_system")
])
@app_commands.checks.has_permissions(administrator=True)
async def reload_module_slash(interaction: discord.Interaction, module: str):
    reloader_cog = interaction.client.get_cog('ReloaderCommands')
    if not reloader_cog:
        await interaction.response.send_message("‚ùå Syst√®me de rechargement non charg√©", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    
    # Utiliser le syst√®me de rechargement Arsenal
    success, result_message = await reloader_cog.reloader.reload_arsenal_module(module)
    
    embed_color = discord.Color.green() if success else discord.Color.red()
    embed_title = "‚úÖ Module recharg√©" if success else "‚ùå √âchec du rechargement"
    
    embed = discord.Embed(
        title=embed_title,
        description=result_message,
        color=embed_color
    )
    
    if success:
        embed.add_field(
            name="üìã Module", 
            value=f"**{module}**", 
            inline=True
        )
        embed.add_field(
            name="‚è∞ Heure",
            value=f"<t:{int(datetime.now().timestamp())}:T>",
            inline=True
        )
    
    await interaction.followup.send(embed=embed, ephemeral=True)

@reload_group.command(name="all", description="Recharge tous les modules Arsenal")
@app_commands.checks.has_permissions(administrator=True)
async def reload_all_slash(interaction: discord.Interaction):
    reloader_cog = interaction.client.get_cog('ReloaderCommands')
    if not reloader_cog:
        await interaction.response.send_message("‚ùå Syst√®me de rechargement non charg√©", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    
    results = []
    total = len(reloader_cog.reloader.arsenal_modules)
    current = 0
    
    # Message de progression initial
    initial_embed = discord.Embed(
        title="üîÑ Rechargement en masse",
        description=f"D√©marrage du rechargement de {total} modules...",
        color=discord.Color.orange()
    )
    await interaction.followup.send(embed=initial_embed, ephemeral=True)
    
    for module_name in reloader_cog.reloader.arsenal_modules.keys():
        current += 1
        
        # Recharger le module
        success, result_msg = await reloader_cog.reloader.reload_arsenal_module(module_name)
        results.append({
            "module": module_name,
            "success": success,
            "message": result_msg
        })
        
        await asyncio.sleep(0.5)  # Petite pause
    
    # R√©sultats finaux
    successful = sum(1 for r in results if r["success"])
    failed = total - successful
    
    final_embed = discord.Embed(
        title="‚úÖ Rechargement termin√©",
        description=f"**R√©sultats:** {successful} r√©ussis, {failed} √©chou√©s sur {total} modules",
        color=discord.Color.green() if failed == 0 else discord.Color.orange()
    )
    
    # D√©tails
    success_list = [f"‚úÖ {r['module']}" for r in results if r["success"]]
    error_list = [f"‚ùå {r['module']}" for r in results if not r["success"]]
    
    if success_list:
        final_embed.add_field(
            name="‚úÖ Succ√®s",
            value="\n".join(success_list[:10]),  # Limiter pour √©viter les embeds trop longs
            inline=True
        )
    
    if error_list:
        final_embed.add_field(
            name="‚ùå Erreurs", 
            value="\n".join(error_list[:10]),
            inline=True
        )
    
    await interaction.edit_original_response(embed=final_embed)

@reload_group.command(name="status", description="Affiche le statut des modules Arsenal")
async def reload_status_slash(interaction: discord.Interaction):
    reloader_cog = interaction.client.get_cog('ReloaderCommands')
    if not reloader_cog:
        await interaction.response.send_message("‚ùå Syst√®me de rechargement non charg√©", ephemeral=True)
        return
    
    embed = discord.Embed(
        title="üîÑ Statut des Modules Arsenal",
        description="√âtat actuel des modules avec rechargement avanc√©",
        color=discord.Color.blue()
    )
    
    loaded_count = 0
    total_count = len(reloader_cog.reloader.arsenal_modules)
    
    for module_name, config in reloader_cog.reloader.arsenal_modules.items():
        # V√©rifier si le Cog est charg√©
        cog = interaction.client.get_cog(config["cog_class"])
        if cog:
            status = "‚úÖ Charg√©"
            loaded_count += 1
        else:
            status = "‚ùå Non charg√©"
        
        embed.add_field(
            name=f"{status} **{module_name}**",
            value=f"Cog: `{config['cog_class']}`",
            inline=True
        )
    
    embed.add_field(
        name="üìä R√©sum√©",
        value=f"**{loaded_count}/{total_count}** modules charg√©s",
        inline=False
    )
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

class ModuleReloader:
    """Gestionnaire de rechargement de modules"""
    
    def __init__(self, bot):
        self.bot = bot
        self.modules_info = {}
        self.watched_directories = [
            "modules/",
            "commands/", 
            "core/",
            "utils/"
        ]
        self.auto_reload = True
        self.reload_log = []
        
        # Modules Arsenal sp√©ciaux avec rechargement avanc√©
        self.arsenal_modules = {
            "user_profiles_system": {
                "path": "modules.user_profiles_system",
                "cog_class": "UserProfileCog",
                "commands": ["profile_group"]
            },
            "automod_system": {
                "path": "modules.automod_system", 
                "cog_class": "AutoModCog",
                "commands": ["automod_group"]
            },
            "economy_system": {
                "path": "modules.economy_system",
                "cog_class": "EconomyCog", 
                "commands": ["economy_group"]
            },
            "ticket_system": {
                "path": "modules.ticket_system",
                "cog_class": "TicketCog",
                "commands": ["ticket_group"]
            },
            "voice_hub_system": {
                "path": "modules.voice_hub_system",
                "cog_class": "VoiceHubCog",
                "commands": []
            },
            "help_system": {
                "path": "commands.help_system",
                "cog_class": "HelpCog",
                "commands": ["help_group", "simple_help"]
            }
        }
        
    def scan_modules(self):
        """Scanner tous les modules disponibles"""
        modules = {}
        
        for directory in self.watched_directories:
            if os.path.exists(directory):
                for file in os.listdir(directory):
                    if file.endswith('.py') and not file.startswith('__'):
                        module_name = file[:-3]  # Enlever .py
                        module_path = os.path.join(directory, file)
                        
                        modules[module_name] = {
                            "path": module_path,
                            "directory": directory,
                            "last_modified": os.path.getmtime(module_path),
                            "loaded": False,
                            "error": None
                        }
        
        self.modules_info = modules
        return modules
    
    async def load_module(self, module_name: str):
        """Charger un module sp√©cifique"""
        if module_name not in self.modules_info:
            return False, f"Module {module_name} non trouv√©"
        
        try:
            module_info = self.modules_info[module_name]
            module_path = module_info["path"]
            
            # Importer le module
            spec = importlib.util.spec_from_file_location(module_name, module_path)
            module = importlib.util.module_from_spec(spec)
            
            # Ajouter au cache des modules
            sys.modules[module_name] = module
            spec.loader.exec_module(module)
            
            # Si le module a une fonction setup, l'appeler
            if hasattr(module, 'setup'):
                await module.setup(self.bot)
            
            module_info["loaded"] = True
            module_info["error"] = None
            
            # Logger
            log_entry = {
                "action": "load",
                "module": module_name,
                "timestamp": datetime.now().isoformat(),
                "success": True
            }
            self.reload_log.append(log_entry)
            
            return True, f"Module {module_name} charg√© avec succ√®s"
            
        except Exception as e:
            error_msg = f"Erreur chargement {module_name}: {str(e)}"
            module_info["error"] = error_msg
            
            log_entry = {
                "action": "load",
                "module": module_name,
                "timestamp": datetime.now().isoformat(),
                "success": False,
                "error": str(e)
            }
            self.reload_log.append(log_entry)
            
            return False, error_msg
    
    async def reload_arsenal_module(self, module_name: str):
        """Recharger un module Arsenal sp√©cifique (avec Cog)"""
        if module_name not in self.arsenal_modules:
            return False, f"Module Arsenal '{module_name}' non reconnu"
        
        try:
            module_config = self.arsenal_modules[module_name]
            module_path = module_config["path"]
            cog_class_name = module_config["cog_class"]
            commands_to_remove = module_config.get("commands", [])
            
            # √âtape 1: D√©charger l'ancien Cog s'il existe
            existing_cog = self.bot.get_cog(cog_class_name)
            if existing_cog:
                await self.bot.remove_cog(cog_class_name)
                print(f"üóëÔ∏è Ancien Cog {cog_class_name} d√©charg√©")
            
            # √âtape 2: Supprimer les commandes slash du tree
            for cmd_name in commands_to_remove:
                try:
                    # Trouver et supprimer la commande du tree
                    for command in self.bot.tree._global_commands.copy():
                        if hasattr(command, 'name') and command.name == cmd_name.replace('_group', ''):
                            self.bot.tree.remove_command(command.name)
                            print(f"üóëÔ∏è Commande slash '{command.name}' supprim√©e")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur suppression commande {cmd_name}: {e}")
            
            # √âtape 3: Recharger le module Python
            if module_path in sys.modules:
                importlib.reload(sys.modules[module_path])
                print(f"üîÑ Module Python {module_path} recharg√©")
            else:
                # Importer pour la premi√®re fois
                imported_module = importlib.import_module(module_path)
                print(f"üì• Module Python {module_path} import√©")
            
            # √âtape 4: Recharger le Cog
            reloaded_module = sys.modules[module_path]
            cog_class = getattr(reloaded_module, cog_class_name)
            new_cog = cog_class(self.bot)
            await self.bot.add_cog(new_cog)
            print(f"‚úÖ Nouveau Cog {cog_class_name} charg√©")
            
            # √âtape 5: R√©-ajouter les commandes slash
            for cmd_name in commands_to_remove:
                try:
                    if hasattr(reloaded_module, cmd_name):
                        command_obj = getattr(reloaded_module, cmd_name)
                        self.bot.tree.add_command(command_obj)
                        print(f"‚úÖ Commande slash '{cmd_name}' r√©-ajout√©e")
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur ajout commande {cmd_name}: {e}")
            
            # √âtape 6: Synchroniser les commandes
            try:
                await self.bot.tree.sync()
                print("üîÑ Commandes slash synchronis√©es")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur sync commandes: {e}")
            
            # Log
            log_entry = {
                "action": "reload_arsenal",
                "module": module_name,
                "timestamp": datetime.now().isoformat(),
                "success": True,
                "details": f"Cog {cog_class_name} recharg√© avec commandes"
            }
            self.reload_log.append(log_entry)
            
            return True, f"‚úÖ Module Arsenal '{module_name}' recharg√© avec succ√®s!"
            
        except Exception as e:
            error_msg = f"‚ùå Erreur rechargement {module_name}: {str(e)}"
            print(f"{error_msg}\n{traceback.format_exc()}")
            
            log_entry = {
                "action": "reload_arsenal",
                "module": module_name,
                "timestamp": datetime.now().isoformat(),
                "success": False,
                "error": str(e)
            }
            self.reload_log.append(log_entry)
            
            return False, error_msg
        
    async def reload_module(self, module_name: str):
        """Recharger un module existant"""
        if module_name not in self.modules_info:
            return False, f"Module {module_name} non trouv√©"
        
        try:
            module_info = self.modules_info[module_name]
            
            # Si le module est d√©j√† charg√©, le d√©charger d'abord
            if module_name in sys.modules:
                module = sys.modules[module_name]
                
                # Appeler teardown si disponible
                if hasattr(module, 'teardown'):
                    await module.teardown(self.bot)
                
                # Retirer du cache
                del sys.modules[module_name]
            
            # Recharger
            success, message = await self.load_module(module_name)
            
            if success:
                # Mettre √† jour le timestamp
                module_info["last_modified"] = os.path.getmtime(module_info["path"])
                
                log_entry = {
                    "action": "reload",
                    "module": module_name,
                    "timestamp": datetime.now().isoformat(),
                    "success": True
                }
                self.reload_log.append(log_entry)
                
                return True, f"Module {module_name} recharg√© avec succ√®s"
            else:
                return False, message
                
        except Exception as e:
            error_msg = f"Erreur rechargement {module_name}: {str(e)}"
            
            log_entry = {
                "action": "reload",
                "module": module_name,
                "timestamp": datetime.now().isoformat(),
                "success": False,
                "error": str(e)
            }
            self.reload_log.append(log_entry)
            
            return False, error_msg
    
    async def unload_module(self, module_name: str):
        """D√©charger un module"""
        if module_name not in sys.modules:
            return False, f"Module {module_name} non charg√©"
        
        try:
            module = sys.modules[module_name]
            
            # Appeler teardown si disponible
            if hasattr(module, 'teardown'):
                await module.teardown(self.bot)
            
            # Retirer du cache
            del sys.modules[module_name]
            
            if module_name in self.modules_info:
                self.modules_info[module_name]["loaded"] = False
            
            log_entry = {
                "action": "unload",
                "module": module_name,
                "timestamp": datetime.now().isoformat(),
                "success": True
            }
            self.reload_log.append(log_entry)
            
            return True, f"Module {module_name} d√©charg√© avec succ√®s"
            
        except Exception as e:
            error_msg = f"Erreur d√©chargement {module_name}: {str(e)}"
            
            log_entry = {
                "action": "unload",
                "module": module_name,
                "timestamp": datetime.now().isoformat(),
                "success": False,
                "error": str(e)
            }
            self.reload_log.append(log_entry)
            
            return False, error_msg
    
    async def check_for_changes(self):
        """V√©rifier les modifications de fichiers"""
        changes = []
        
        for module_name, info in self.modules_info.items():
            try:
                current_modified = os.path.getmtime(info["path"])
                if current_modified > info["last_modified"]:
                    changes.append(module_name)
            except:
                pass
        
        return changes
    
    async def auto_reload_loop(self):
        """Boucle de rechargement automatique"""
        while self.auto_reload:
            try:
                changes = await self.check_for_changes()
                
                for module_name in changes:
                    if self.modules_info[module_name]["loaded"]:
                        success, message = await self.reload_module(module_name)
                        print(f"üîÑ Auto-reload {module_name}: {message}")
                
                await asyncio.sleep(5)  # V√©rifier toutes les 5 secondes
                
            except Exception as e:
                print(f"‚ùå Erreur auto-reload: {e}")
                await asyncio.sleep(10)

class ReloaderCommands(commands.Cog):
    """Commandes de gestion des modules"""
    
    def __init__(self, bot):
        self.bot = bot
        self.reloader = ModuleReloader(bot)
        
        # Scanner les modules au d√©marrage
        self.reloader.scan_modules()
        
        # D√©marrer la boucle auto-reload
        if self.reloader.auto_reload:
            asyncio.create_task(self.reloader.auto_reload_loop())
    
    @commands.group(name='module', invoke_without_command=True)
    @commands.has_permissions(administrator=True)
    async def module_management(self, ctx):
        """Commandes de gestion des modules"""
        embed = discord.Embed(
            title="üîÑ Gestionnaire de Modules Arsenal",
            description="Syst√®me de rechargement √† chaud des modules",
            color=0x00ff00
        )
        
        embed.add_field(
            name="üìã Commandes",
            value="`!module list` - Lister tous les modules\n"
                  "`!module reload <nom>` - Recharger un module\n"
                  "`!module load <nom>` - Charger un module\n"
                  "`!module unload <nom>` - D√©charger un module\n"
                  "`!module status` - √âtat des modules\n"
                  "`!module logs` - Logs de rechargement",
            inline=False
        )
        
        embed.add_field(
            name="üèπ Modules Sp√©ciaux",
            value="`!module reload hunt_royal_system` - Recharger Hunt Royal\n"
                  "`!module reload suggestions` - Recharger syst√®me suggestions\n"
                  "`!module scan` - Rescanner les modules",
            inline=False
        )
        
        await ctx.send(embed=embed)
    
    @module_management.command(name='list')
    async def list_modules(self, ctx):
        """Lister tous les modules disponibles"""
        modules = self.reloader.modules_info
        
        embed = discord.Embed(
            title="üìã Modules Arsenal Disponibles",
            description=f"Total: {len(modules)} modules",
            color=0x0099ff
        )
        
        loaded_modules = []
        unloaded_modules = []
        error_modules = []
        
        for name, info in modules.items():
            status = "‚úÖ" if info["loaded"] else "‚≠ï"
            if info["error"]:
                status = "‚ùå"
                error_modules.append(f"{status} **{name}** - {info['error'][:50]}...")
            elif info["loaded"]:
                loaded_modules.append(f"{status} **{name}** - {info['directory']}")
            else:
                unloaded_modules.append(f"{status} **{name}** - {info['directory']}")
        
        if loaded_modules:
            embed.add_field(
                name="‚úÖ Modules Charg√©s",
                value="\n".join(loaded_modules[:10]),  # Limiter √† 10
                inline=False
            )
        
        if unloaded_modules:
            embed.add_field(
                name="‚≠ï Modules Non Charg√©s",
                value="\n".join(unloaded_modules[:10]),
                inline=False
            )
        
        if error_modules:
            embed.add_field(
                name="‚ùå Modules en Erreur",
                value="\n".join(error_modules[:5]),
                inline=False
            )
        
        await ctx.send(embed=embed)
    
    @module_management.command(name='reload')
    async def reload_module(self, ctx, module_name: str):
        """Recharger un module sp√©cifique"""
        # Message de chargement
        loading_embed = discord.Embed(
            title="üîÑ Rechargement en cours...",
            description=f"Rechargement du module **{module_name}**",
            color=0xffa500
        )
        message = await ctx.send(embed=loading_embed)
        
        # V√©rifier si c'est un module Arsenal sp√©cial
        if module_name in self.reloader.arsenal_modules:
            success, result_message = await self.reloader.reload_arsenal_module(module_name)
        elif module_name in self.reloader.modules_info:
            success, result_message = await self.reloader.reload_module(module_name)
        else:
            success = False
            result_message = f"Module **{module_name}** non trouv√©"
        
        # R√©sultat
        embed_color = 0x00ff00 if success else 0xff0000
        embed_title = "‚úÖ Rechargement r√©ussi" if success else "‚ùå √âchec du rechargement"
        
        result_embed = discord.Embed(
            title=embed_title,
            description=result_message,
            color=embed_color
        )
        
        if success:
            result_embed.add_field(
                name="üìã Module",
                value=f"**{module_name}**",
                inline=True
            )
            result_embed.add_field(
                name="‚è∞ Heure",
                value=f"<t:{int(datetime.now().timestamp())}:T>",
                inline=True
            )
        
        await message.edit(embed=result_embed)
        
        # Recharger le module
        success, result_message = await self.reloader.reload_module(module_name)
        
        # R√©sultat
        embed = discord.Embed(
            title="‚úÖ Rechargement r√©ussi" if success else "‚ùå √âchec du rechargement",
            description=result_message,
            color=0x00ff00 if success else 0xff0000
        )
        
        if success:
            embed.add_field(
                name="üìä Infos",
                value=f"**Module:** {module_name}\n"
                      f"**Timestamp:** {datetime.now().strftime('%H:%M:%S')}\n"
                      f"**R√©pertoire:** {self.reloader.modules_info[module_name]['directory']}",
                inline=False
            )
        
        await message.edit(embed=embed)
    
    @module_management.command(name='load')
    async def load_module(self, ctx, module_name: str):
        """Charger un module"""
        success, message = await self.reloader.load_module(module_name)
        
        embed = discord.Embed(
            title="‚úÖ Module charg√©" if success else "‚ùå √âchec du chargement",
            description=message,
            color=0x00ff00 if success else 0xff0000
        )
        
        await ctx.send(embed=embed)
    
    @module_management.command(name='unload')
    async def unload_module(self, ctx, module_name: str):
        """D√©charger un module"""
        success, message = await self.reloader.unload_module(module_name)
        
        embed = discord.Embed(
            title="‚úÖ Module d√©charg√©" if success else "‚ùå √âchec du d√©chargement",
            description=message,
            color=0x00ff00 if success else 0xff0000
        )
        
        await ctx.send(embed=embed)
    
    @module_management.command(name='status')
    async def module_status(self, ctx):
        """√âtat d√©taill√© des modules"""
        modules = self.reloader.modules_info
        
        total = len(modules)
        loaded = sum(1 for m in modules.values() if m["loaded"])
        errors = sum(1 for m in modules.values() if m["error"])
        
        embed = discord.Embed(
            title="üìä √âtat des Modules Arsenal",
            description=f"**Total:** {total} | **Charg√©s:** {loaded} | **Erreurs:** {errors}",
            color=0x00ff00 if errors == 0 else 0xffa500
        )
        
        # Statistiques
        embed.add_field(
            name="üìà Statistiques",
            value=f"**Taux de chargement:** {(loaded/total*100):.1f}%\n"
                  f"**Auto-reload:** {'‚úÖ Actif' if self.reloader.auto_reload else '‚ùå Inactif'}\n"
                  f"**Derni√®re v√©rification:** {datetime.now().strftime('%H:%M:%S')}",
            inline=True
        )
        
        # R√©pertoires surveill√©s
        directories = "\n".join([f"‚Ä¢ {d}" for d in self.reloader.watched_directories])
        embed.add_field(
            name="üìÅ R√©pertoires Surveill√©s",
            value=directories,
            inline=True
        )
        
        # Modules critiques
        critical_modules = ["hunt_royal_system", "suggestions", "music_system"]
        critical_status = []
        
        for module in critical_modules:
            if module in modules:
                status = "‚úÖ" if modules[module]["loaded"] else "‚ùå"
                critical_status.append(f"{status} {module}")
        
        if critical_status:
            embed.add_field(
                name="üî• Modules Critiques",
                value="\n".join(critical_status),
                inline=False
            )
        
        await ctx.send(embed=embed)
    
    @module_management.command(name='arsenal')
    async def arsenal_modules(self, ctx):
        """Affiche les modules Arsenal sp√©ciaux"""
        embed = discord.Embed(
            title="üèπ Modules Arsenal Sp√©ciaux",
            description="Modules avec rechargement avanc√© (Cogs + Commandes)",
            color=0x7289da
        )
        
        for module_name, config in self.reloader.arsenal_modules.items():
            # V√©rifier si le Cog est charg√©
            cog = self.bot.get_cog(config["cog_class"])
            status = "‚úÖ Charg√©" if cog else "‚ùå Non charg√©"
            
            embed.add_field(
                name=f"{status} **{module_name}**",
                value=f"**Fichier:** `{config['path']}`\n"
                      f"**Cog:** `{config['cog_class']}`\n"
                      f"**Commandes:** {len(config.get('commands', []))}",
                inline=True
            )
        
        embed.add_field(
            name="üîÑ Commandes",
            value="`!module reload <nom>` - Recharger un module Arsenal\n"
                  "`!module reload_all` - Recharger tous les modules\n"
                  "`!module arsenal` - Voir cette liste",
            inline=False
        )
        
        await ctx.send(embed=embed)
    
    @module_management.command(name='reload_all')
    async def reload_all_arsenal(self, ctx):
        """Recharge tous les modules Arsenal"""
        embed = discord.Embed(
            title="üîÑ Rechargement de tous les modules Arsenal",
            description="D√©marrage du rechargement en masse...",
            color=0xffa500
        )
        message = await ctx.send(embed=embed)
        
        results = []
        total = len(self.reloader.arsenal_modules)
        current = 0
        
        for module_name in self.reloader.arsenal_modules.keys():
            current += 1
            
            # Mettre √† jour le message de progression
            progress_embed = discord.Embed(
                title="üîÑ Rechargement en cours...",
                description=f"Module: **{module_name}** ({current}/{total})",
                color=0xffa500
            )
            await message.edit(embed=progress_embed)
            
            # Recharger le module
            success, result_msg = await self.reloader.reload_arsenal_module(module_name)
            results.append({
                "module": module_name,
                "success": success,
                "message": result_msg
            })
            
            await asyncio.sleep(1)  # Petite pause entre les modules
        
        # Afficher les r√©sultats
        successful = sum(1 for r in results if r["success"])
        failed = total - successful
        
        final_embed = discord.Embed(
            title="‚úÖ Rechargement termin√©",
            description=f"**R√©sultats:** {successful} r√©ussis, {failed} √©chou√©s",
            color=0x00ff00 if failed == 0 else 0xffa500
        )
        
        # D√©tails des r√©sultats
        success_list = []
        error_list = []
        
        for result in results:
            if result["success"]:
                success_list.append(f"‚úÖ {result['module']}")
            else:
                error_list.append(f"‚ùå {result['module']}: {result['message'][:50]}...")
        
        if success_list:
            final_embed.add_field(
                name="‚úÖ Succ√®s",
                value="\n".join(success_list),
                inline=True
            )
        
        if error_list:
            final_embed.add_field(
                name="‚ùå Erreurs",
                value="\n".join(error_list),
                inline=True
            )
        
        await message.edit(embed=final_embed)
    
    @module_management.command(name='logs')
    async def module_logs(self, ctx, limit: int = 10):
        """Afficher les logs de rechargement"""
        logs = self.reloader.reload_log[-limit:]
        
        if not logs:
            embed = discord.Embed(
                title="üìã Logs de Rechargement",
                description="Aucun log disponible",
                color=0x999999
            )
            await ctx.send(embed=embed)
            return
        
        embed = discord.Embed(
            title="üìã Logs de Rechargement",
            description=f"Derni√®res {len(logs)} op√©rations",
            color=0x0099ff
        )
        
        for log in logs:
            status_icon = "‚úÖ" if log["success"] else "‚ùå"
            timestamp = datetime.fromisoformat(log["timestamp"]).strftime("%H:%M:%S")
            
            value = f"**Action:** {log['action']}\n"
            value += f"**Timestamp:** {timestamp}\n"
            if not log["success"] and "error" in log:
                value += f"**Erreur:** {log['error'][:100]}..."
            
            embed.add_field(
                name=f"{status_icon} {log['module']}",
                value=value,
                inline=True
            )
        
        await ctx.send(embed=embed)
    
    @module_management.command(name='scan')
    async def scan_modules(self, ctx):
        """Rescanner les modules disponibles"""
        old_count = len(self.reloader.modules_info)
        modules = self.reloader.scan_modules()
        new_count = len(modules)
        
        embed = discord.Embed(
            title="üîç Scan des Modules Termin√©",
            description=f"**Avant:** {old_count} modules\n**Apr√®s:** {new_count} modules",
            color=0x00ff00
        )
        
        if new_count > old_count:
            embed.add_field(
                name="‚ûï Nouveaux Modules D√©tect√©s",
                value=f"+{new_count - old_count} modules trouv√©s",
                inline=False
            )
        
        # Lister les r√©pertoires scann√©s
        scanned = []
        for directory in self.reloader.watched_directories:
            if os.path.exists(directory):
                count = len([f for f in os.listdir(directory) if f.endswith('.py')])
                scanned.append(f"‚Ä¢ {directory}: {count} fichiers")
        
        embed.add_field(
            name="üìÅ R√©pertoires Scann√©s",
            value="\n".join(scanned),
            inline=False
        )
        
        await ctx.send(embed=embed)

# ==================== FONCTIONS D'INITIALISATION ====================

def setup(bot):
    """Charger le syst√®me de rechargement"""
    bot.add_cog(ReloaderCommands(bot))
    print("üîÑ Syst√®me de rechargement de modules charg√© !")

def teardown(bot):
    """D√©charger le syst√®me de rechargement"""
    # Arr√™ter l'auto-reload
    for cog in bot.cogs.values():
        if hasattr(cog, 'reloader'):
            cog.reloader.auto_reload = False
    
    bot.remove_cog('ReloaderCommands')
    print("üîÑ Syst√®me de rechargement d√©charg√©")

if __name__ == "__main__":
    print("üîÑ Module Reloader - Syst√®me de Hot-Reload initialis√©")
