"""
üöÄ Arsenal V4 - Interface Supr√™me ULTRA
Developed by XeRoX Elite ¬© 2024-2025
Interface de gestion compl√®te pour Arsenal Bot
VERSION 2.0 - ENCORE PLUS INCROYABLE !
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import json
import os
import sys
import threading
import asyncio
from datetime import datetime
import subprocess
import webbrowser
import time
from tkinter import font

# Import du syst√®me de logging
try:
    from utils.change_logger import log_ui_change, log_feature
    LOGGING_ENABLED = True
except ImportError:
    LOGGING_ENABLED = False
    def log_ui_change(*args, **kwargs): pass
    def log_feature(*args, **kwargs): pass

class ArsenalSuperInterfaceUltra:
    def __init__(self, bot_client=None):
        if LOGGING_ENABLED:
            log_ui_change("gui", "D√©marrage de l'interface supr√™me ULTRA", {
                "version": "2.0",
                "improvements": ["Animations", "Th√®mes", "Monitoring temps r√©el", "Console int√©gr√©e"]
            }, "high")
            
        self.bot_client = bot_client
        self.root = tk.Tk()
        self.current_theme = "arsenal"  # arsenal, matrix, galaxy, fire
        self.animations_enabled = True
        self.setup_window()
        self.create_interface()
        self.start_real_time_updates()
        
    def setup_window(self):
        """Configuration de la fen√™tre principale ULTRA"""
        self.root.title("üöÄ Arsenal V4 - Interface Supr√™me ULTRA")
        self.root.geometry("1600x1000")
        self.root.configure(bg='#000000')
        
        # Interdire le redimensionnement pour maintenir le design
        self.root.resizable(True, True)
        
        # Style moderne avanc√©
        style = ttk.Style()
        style.theme_use('clam')
        
        # D√©finir les th√®mes
        self.themes = {
            "arsenal": {
                'primary': '#00fff7',
                'secondary': '#00ff88', 
                'background': '#0a0f1c',
                'sidebar': '#1a1f2e',
                'card': '#232a36',
                'text': '#ffffff',
                'accent': '#0088ff',
                'danger': '#ff4444',
                'warning': '#ffaa00',
                'success': '#00ff88'
            },
            "matrix": {
                'primary': '#00ff00',
                'secondary': '#33ff33', 
                'background': '#000000',
                'sidebar': '#0a0a0a',
                'card': '#1a1a1a',
                'text': '#00ff00',
                'accent': '#66ff66',
                'danger': '#ff0000',
                'warning': '#ffff00',
                'success': '#00ff00'
            },
            "galaxy": {
                'primary': '#9d4edd',
                'secondary': '#c77dff', 
                'background': '#10002b',
                'sidebar': '#240046',
                'card': '#3c096c',
                'text': '#ffffff',
                'accent': '#5a189a',
                'danger': '#ff006e',
                'warning': '#fb8500',
                'success': '#7209b7'
            },
            "fire": {
                'primary': '#ff6b35',
                'secondary': '#f7931e', 
                'background': '#1a0000',
                'sidebar': '#330000',
                'card': '#4d0000',
                'text': '#ffffff',
                'accent': '#ff9500',
                'danger': '#ff0000',
                'warning': '#ffaa00',
                'success': '#00ff00'
            }
        }
        
        self.colors = self.themes[self.current_theme]
        
        # Configurer les styles TTK
        self.configure_styles(style)
        
        # Police personnalis√©e
        self.fonts = {
            'title': font.Font(family='Orbitron', size=24, weight='bold'),
            'subtitle': font.Font(family='Orbitron', size=16, weight='bold'),
            'heading': font.Font(family='Arial', size=14, weight='bold'),
            'normal': font.Font(family='Arial', size=10),
            'small': font.Font(family='Arial', size=8)
        }
        
    def configure_styles(self, style):
        """Configurer les styles TTK avanc√©s"""
        style.configure('Modern.TFrame', background=self.colors['background'])
        style.configure('Sidebar.TFrame', background=self.colors['sidebar'])
        style.configure('Card.TFrame', background=self.colors['card'], relief='raised', borderwidth=2)
        style.configure('Danger.TFrame', background=self.colors['danger'])
        style.configure('Success.TFrame', background=self.colors['success'])
        
    def create_interface(self):
        """Cr√©er l'interface principale ULTRA"""
        
        if LOGGING_ENABLED:
            log_ui_change("gui", "Cr√©ation interface ULTRA avec nouveaux composants", {
                "components": ["Header anim√©", "Sidebar avanc√©e", "Console int√©gr√©e", "Monitoring temps r√©el"]
            }, "normal")
        
        # Header sup√©rieur avec contr√¥les
        self.create_top_header()
        
        # Container principal
        main_container = tk.Frame(self.root, bg=self.colors['background'])
        main_container.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Sidebar gauche (√©largie)
        self.sidebar = tk.Frame(main_container, bg=self.colors['sidebar'], width=350)
        self.sidebar.pack(side='left', fill='y', padx=(0, 5))
        self.sidebar.pack_propagate(False)
        
        # Zone centrale (content + console)
        center_container = tk.Frame(main_container, bg=self.colors['background'])
        center_container.pack(side='left', fill='both', expand=True)
        
        # Content area principale
        self.content = tk.Frame(center_container, bg=self.colors['background'])
        self.content.pack(fill='both', expand=True, pady=(0, 5))
        
        # Console int√©gr√©e en bas
        self.create_integrated_console(center_container)
        
        # Panneau de monitoring √† droite
        self.monitoring_panel = tk.Frame(main_container, bg=self.colors['card'], width=300)
        self.monitoring_panel.pack(side='right', fill='y', padx=(5, 0))
        self.monitoring_panel.pack_propagate(False)
        
        self.create_advanced_sidebar()
        self.create_monitoring_panel()
        self.create_dashboard()
        
    def create_top_header(self):
        """Cr√©er le header sup√©rieur avec contr√¥les"""
        header = tk.Frame(self.root, bg=self.colors['sidebar'], height=60)
        header.pack(fill='x', padx=5, pady=(5, 0))
        header.pack_propagate(False)
        
        # Logo et titre
        logo_frame = tk.Frame(header, bg=self.colors['sidebar'])
        logo_frame.pack(side='left', padx=20, pady=10)
        
        title_label = tk.Label(logo_frame, text="üöÄ ARSENAL V4 ULTRA", 
                              font=self.fonts['subtitle'],
                              fg=self.colors['primary'], bg=self.colors['sidebar'])
        title_label.pack(side='left')
        
        # Contr√¥les du header
        controls_frame = tk.Frame(header, bg=self.colors['sidebar'])
        controls_frame.pack(side='right', padx=20, pady=10)
        
        # S√©lecteur de th√®me
        theme_label = tk.Label(controls_frame, text="Th√®me:", 
                              font=self.fonts['normal'],
                              fg=self.colors['text'], bg=self.colors['sidebar'])
        theme_label.pack(side='left', padx=(0, 5))
        
        self.theme_var = tk.StringVar(value=self.current_theme)
        theme_combo = ttk.Combobox(controls_frame, textvariable=self.theme_var, 
                                  values=list(self.themes.keys()), width=10, state='readonly')
        theme_combo.pack(side='left', padx=5)
        theme_combo.bind('<<ComboboxSelected>>', self.change_theme)
        
        # Toggle animations
        self.animations_var = tk.BooleanVar(value=self.animations_enabled)
        anim_check = tk.Checkbutton(controls_frame, text="Animations", 
                                   variable=self.animations_var,
                                   command=self.toggle_animations,
                                   fg=self.colors['text'], bg=self.colors['sidebar'],
                                   selectcolor=self.colors['card'])
        anim_check.pack(side='left', padx=10)
        
        # Statut temps r√©el
        self.status_label = tk.Label(controls_frame, text="‚ö° Syst√®me OK", 
                                    font=self.fonts['normal'],
                                    fg=self.colors['success'], bg=self.colors['sidebar'])
        self.status_label.pack(side='left', padx=10)
        
    def create_integrated_console(self, parent):
        """Cr√©er la console int√©gr√©e"""
        console_frame = tk.Frame(parent, bg=self.colors['card'], height=150)
        console_frame.pack(fill='x', pady=(5, 0))
        console_frame.pack_propagate(False)
        
        # Header de la console
        console_header = tk.Frame(console_frame, bg=self.colors['sidebar'], height=30)
        console_header.pack(fill='x')
        console_header.pack_propagate(False)
        
        console_title = tk.Label(console_header, text="üíª Console Arsenal", 
                                font=self.fonts['heading'],
                                fg=self.colors['primary'], bg=self.colors['sidebar'])
        console_title.pack(side='left', padx=10, pady=5)
        
        # Boutons de la console
        clear_btn = tk.Button(console_header, text="Effacer", 
                             command=self.clear_console,
                             bg=self.colors['danger'], fg='white', 
                             font=self.fonts['small'], relief='flat')
        clear_btn.pack(side='right', padx=5, pady=3)
        
        export_btn = tk.Button(console_header, text="Exporter", 
                              command=self.export_console,
                              bg=self.colors['accent'], fg='white', 
                              font=self.fonts['small'], relief='flat')
        export_btn.pack(side='right', padx=5, pady=3)
        
        # Zone de texte de la console
        console_container = tk.Frame(console_frame, bg=self.colors['card'])
        console_container.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Scrollbar
        scrollbar = tk.Scrollbar(console_container)
        scrollbar.pack(side='right', fill='y')
        
        # Zone de texte
        self.console_text = tk.Text(console_container, 
                                   bg='#000000', fg=self.colors['primary'],
                                   font=('Courier', 9),
                                   yscrollcommand=scrollbar.set,
                                   state='disabled', wrap='word')
        self.console_text.pack(fill='both', expand=True)
        scrollbar.config(command=self.console_text.yview)
        
        # Log initial
        self.log_to_console("üöÄ Arsenal V4 Console initialis√©e")
        self.log_to_console("üí° Tapez 'help' pour voir les commandes disponibles")
        
        # Zone de commande
        command_frame = tk.Frame(console_frame, bg=self.colors['card'])
        command_frame.pack(fill='x', padx=5, pady=(0, 5))
        
        prompt_label = tk.Label(command_frame, text="arsenal>", 
                               font=('Courier', 9, 'bold'),
                               fg=self.colors['secondary'], bg=self.colors['card'])
        prompt_label.pack(side='left')
        
        self.command_entry = tk.Entry(command_frame, 
                                     bg='#1a1a1a', fg=self.colors['text'],
                                     font=('Courier', 9), relief='flat')
        self.command_entry.pack(fill='x', expand=True, padx=(5, 0))
        self.command_entry.bind('<Return>', self.execute_console_command)
        
    def create_monitoring_panel(self):
        """Cr√©er le panneau de monitoring"""
        # Header du monitoring
        monitor_header = tk.Frame(self.monitoring_panel, bg=self.colors['sidebar'], height=40)
        monitor_header.pack(fill='x')
        monitor_header.pack_propagate(False)
        
        monitor_title = tk.Label(monitor_header, text="üìä Monitoring", 
                                font=self.fonts['heading'],
                                fg=self.colors['primary'], bg=self.colors['sidebar'])
        monitor_title.pack(pady=10)
        
        # M√©triques syst√®me
        self.create_system_metrics()
        
        # Activit√© temps r√©el
        self.create_realtime_activity()
        
        # Notifications
        self.create_notifications_panel()
        
    def create_system_metrics(self):
        """Cr√©er les m√©triques syst√®me"""
        metrics_frame = tk.Frame(self.monitoring_panel, bg=self.colors['card'])
        metrics_frame.pack(fill='x', padx=5, pady=5)
        
        metrics_title = tk.Label(metrics_frame, text="‚ö° M√©triques Syst√®me", 
                                font=self.fonts['normal'],
                                fg=self.colors['secondary'], bg=self.colors['card'])
        metrics_title.pack(pady=5)
        
        # M√©triques individuelles
        self.metrics = {}
        metrics_data = [
            ("CPU", "cpu_usage", "%"),
            ("RAM", "ram_usage", "%"),
            ("R√©seau", "network", "KB/s"),
            ("Uptime", "uptime", "h")
        ]
        
        for name, key, unit in metrics_data:
            metric_row = tk.Frame(metrics_frame, bg=self.colors['card'])
            metric_row.pack(fill='x', padx=10, pady=2)
            
            label = tk.Label(metric_row, text=f"{name}:", 
                            font=self.fonts['small'],
                            fg=self.colors['text'], bg=self.colors['card'])
            label.pack(side='left')
            
            value_label = tk.Label(metric_row, text=f"0{unit}", 
                                  font=self.fonts['small'],
                                  fg=self.colors['primary'], bg=self.colors['card'])
            value_label.pack(side='right')
            
            self.metrics[key] = value_label
            
    def create_realtime_activity(self):
        """Cr√©er l'activit√© temps r√©el"""
        activity_frame = tk.Frame(self.monitoring_panel, bg=self.colors['card'])
        activity_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        activity_title = tk.Label(activity_frame, text="üî• Activit√© Temps R√©el", 
                                 font=self.fonts['normal'],
                                 fg=self.colors['secondary'], bg=self.colors['card'])
        activity_title.pack(pady=5)
        
        # Zone de scroll pour l'activit√©
        activity_container = tk.Frame(activity_frame, bg=self.colors['card'])
        activity_container.pack(fill='both', expand=True, padx=5, pady=5)
        
        activity_scroll = tk.Scrollbar(activity_container)
        activity_scroll.pack(side='right', fill='y')
        
        self.activity_listbox = tk.Listbox(activity_container,
                                          bg=self.colors['background'], 
                                          fg=self.colors['text'],
                                          font=self.fonts['small'],
                                          yscrollcommand=activity_scroll.set,
                                          selectbackground=self.colors['primary'])
        self.activity_listbox.pack(fill='both', expand=True)
        activity_scroll.config(command=self.activity_listbox.yview)
        
        # Activit√©s initiales
        initial_activities = [
            "üöÄ Interface ULTRA d√©marr√©e",
            "üìä Monitoring activ√©",
            "üîÑ Auto-refresh configur√©",
            "‚ö° Pr√™t pour les commandes"
        ]
        
        for activity in initial_activities:
            self.activity_listbox.insert('end', activity)
            
    def create_notifications_panel(self):
        """Cr√©er le panneau de notifications"""
        notif_frame = tk.Frame(self.monitoring_panel, bg=self.colors['card'], height=120)
        notif_frame.pack(fill='x', padx=5, pady=5)
        notif_frame.pack_propagate(False)
        
        notif_title = tk.Label(notif_frame, text="üîî Notifications", 
                              font=self.fonts['normal'],
                              fg=self.colors['secondary'], bg=self.colors['card'])
        notif_title.pack(pady=5)
        
        # Badge de notifications
        self.notif_badge = tk.Label(notif_frame, text="0 nouvelles", 
                                   font=self.fonts['small'],
                                   fg=self.colors['warning'], bg=self.colors['card'])
        self.notif_badge.pack(pady=2)
        
        # Derni√®re notification
        self.last_notif = tk.Label(notif_frame, text="Aucune notification", 
                                  font=self.fonts['small'],
                                  fg=self.colors['text'], bg=self.colors['card'],
                                  wraplength=280)
        self.last_notif.pack(pady=5)
        
    def start_real_time_updates(self):
        """D√©marrer les mises √† jour temps r√©el"""
        self.update_real_time_data()
        
    def update_real_time_data(self):
        """Mettre √† jour les donn√©es en temps r√©el"""
        try:
            # Simuler des m√©triques syst√®me
            import random
            import psutil
            
            # Vraies m√©triques si psutil disponible
            try:
                cpu_usage = psutil.cpu_percent()
                ram_usage = psutil.virtual_memory().percent
                network_io = psutil.net_io_counters()
                uptime_seconds = time.time() - psutil.boot_time()
                uptime_hours = int(uptime_seconds / 3600)
            except:
                # M√©triques simul√©es
                cpu_usage = random.randint(5, 25)
                ram_usage = random.randint(40, 70)
                uptime_hours = random.randint(1, 48)
                
            # Mettre √† jour les m√©triques
            self.metrics['cpu_usage'].config(text=f"{cpu_usage:.1f}%")
            self.metrics['ram_usage'].config(text=f"{ram_usage:.1f}%")
            self.metrics['network'].config(text=f"{random.randint(10, 100)} KB/s")
            self.metrics['uptime'].config(text=f"{uptime_hours}h")
            
            # Mettre √† jour le statut
            if cpu_usage < 50 and ram_usage < 80:
                self.status_label.config(text="‚ö° Syst√®me OK", fg=self.colors['success'])
            elif cpu_usage < 80:
                self.status_label.config(text="‚ö†Ô∏è Charge Mod√©r√©e", fg=self.colors['warning'])
            else:
                self.status_label.config(text="üî• Charge √âlev√©e", fg=self.colors['danger'])
                
            # Ajouter une activit√© al√©atoire
            if random.randint(1, 100) < 10:  # 10% de chance
                activities = [
                    "üéµ Nouvelle chanson en lecture",
                    "üë§ Utilisateur connect√©",
                    "‚ö° Commande ex√©cut√©e",
                    "üìä Statistiques mises √† jour",
                    "üîÑ Sauvegarde automatique",
                    "üõ°Ô∏è Scan s√©curit√© OK"
                ]
                self.add_realtime_activity(random.choice(activities))
                
        except Exception as e:
            self.log_to_console(f"‚ùå Erreur mise √† jour temps r√©el: {e}")
            
        # Programmer la prochaine mise √† jour
        self.root.after(2000, self.update_real_time_data)  # Toutes les 2 secondes
        
    # ==================== M√âTHODES UTILITAIRES ULTRA ====================
    
    def change_theme(self, event=None):
        """Changer le th√®me de l'interface"""
        new_theme = self.theme_var.get()
        if new_theme != self.current_theme:
            self.current_theme = new_theme
            self.colors = self.themes[new_theme]
            
            if LOGGING_ENABLED:
                log_ui_change("gui", f"Changement de th√®me vers {new_theme}", {
                    "old_theme": self.current_theme,
                    "new_theme": new_theme
                })
            
            self.log_to_console(f"üé® Th√®me chang√© vers: {new_theme}")
            self.apply_theme_to_all_widgets()
            
    def apply_theme_to_all_widgets(self):
        """Appliquer le th√®me √† tous les widgets"""
        try:
            # Reconfigurer tous les frames principaux
            self.root.configure(bg=self.colors['background'])
            self.sidebar.configure(bg=self.colors['sidebar'])
            self.content.configure(bg=self.colors['background'])
            self.monitoring_panel.configure(bg=self.colors['card'])
            
            # Reconfigurer les labels de statut
            self.status_label.configure(fg=self.colors['success'], bg=self.colors['sidebar'])
            
            self.log_to_console(f"‚úÖ Th√®me {self.current_theme} appliqu√© avec succ√®s")
            
        except Exception as e:
            self.log_to_console(f"‚ùå Erreur application th√®me: {e}")
            
    def toggle_animations(self):
        """Activer/d√©sactiver les animations"""
        self.animations_enabled = self.animations_var.get()
        status = "activ√©es" if self.animations_enabled else "d√©sactiv√©es"
        self.log_to_console(f"üé¨ Animations {status}")
        
        if LOGGING_ENABLED:
            log_ui_change("gui", f"Animations {status}", {
                "enabled": self.animations_enabled
            })
            
    def log_to_console(self, message):
        """Logger un message dans la console int√©gr√©e"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            formatted_message = f"[{timestamp}] {message}"
            
            self.console_text.configure(state='normal')
            self.console_text.insert('end', formatted_message + '\n')
            self.console_text.configure(state='disabled')
            self.console_text.see('end')
            
        except Exception as e:
            print(f"Erreur console log: {e}")
            
    def clear_console(self):
        """Effacer la console"""
        self.console_text.configure(state='normal')
        self.console_text.delete(1.0, 'end')
        self.console_text.configure(state='disabled')
        self.log_to_console("üßπ Console effac√©e")
        
    def export_console(self):
        """Exporter les logs de la console"""
        try:
            content = self.console_text.get(1.0, 'end')
            filename = f"arsenal_console_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(content)
                
            self.log_to_console(f"üìÑ Console export√©e: {filename}")
            messagebox.showinfo("‚úÖ Export", f"Console export√©e:\n{filename}")
            
        except Exception as e:
            self.log_to_console(f"‚ùå Erreur export: {e}")
            messagebox.showerror("‚ùå Erreur", f"Impossible d'exporter:\n{e}")
            
    def execute_console_command(self, event=None):
        """Ex√©cuter une commande console"""
        command = self.command_entry.get().strip()
        if not command:
            return
            
        self.command_entry.delete(0, 'end')
        self.log_to_console(f"arsenal> {command}")
        
        # Traiter les commandes
        if command.lower() == 'help':
            self.show_console_help()
        elif command.lower() == 'clear':
            self.clear_console()
        elif command.lower() == 'status':
            self.show_system_status()
        elif command.lower() == 'theme':
            self.log_to_console(f"Th√®me actuel: {self.current_theme}")
        elif command.lower().startswith('theme '):
            theme_name = command.split(' ', 1)[1]
            if theme_name in self.themes:
                self.theme_var.set(theme_name)
                self.change_theme()
            else:
                self.log_to_console(f"‚ùå Th√®me inconnu: {theme_name}")
        elif command.lower() == 'stats':
            self.show_detailed_stats()
        elif command.lower() == 'export':
            self.export_console()
        else:
            self.log_to_console(f"‚ùå Commande inconnue: {command}")
            self.log_to_console("üí° Tapez 'help' pour voir les commandes")
            
    def show_console_help(self):
        """Afficher l'aide de la console"""
        help_text = """
üìö Commandes disponibles:
  help          - Afficher cette aide
  clear         - Effacer la console
  status        - Afficher le statut syst√®me
  stats         - Afficher les statistiques d√©taill√©es
  theme         - Afficher le th√®me actuel
  theme <nom>   - Changer de th√®me (arsenal, matrix, galaxy, fire)
  export        - Exporter les logs de la console
  
üéØ Th√®mes disponibles: {0}
        """.format(", ".join(self.themes.keys()))
        
        for line in help_text.strip().split('\n'):
            self.log_to_console(line)
            
    def show_system_status(self):
        """Afficher le statut syst√®me d√©taill√©"""
        try:
            import psutil
            
            self.log_to_console("üîç === STATUT SYST√àME ===")
            self.log_to_console(f"CPU: {psutil.cpu_percent()}%")
            self.log_to_console(f"RAM: {psutil.virtual_memory().percent}%")
            self.log_to_console(f"Disque: {psutil.disk_usage('.').percent}%")
            self.log_to_console(f"Processus: {len(psutil.pids())}")
            
        except ImportError:
            self.log_to_console("‚ö†Ô∏è psutil non disponible - statut simul√©")
            self.log_to_console("CPU: ~15%, RAM: ~60%, Disque: ~45%")
            
    def show_detailed_stats(self):
        """Afficher les statistiques d√©taill√©es"""
        self.log_to_console("üìä === STATISTIQUES ARSENAL ===")
        self.log_to_console(f"Interface: Arsenal V4 ULTRA")
        self.log_to_console(f"Th√®me: {self.current_theme}")
        self.log_to_console(f"Animations: {'ON' if self.animations_enabled else 'OFF'}")
        self.log_to_console(f"D√©marrage: {datetime.now().strftime('%H:%M:%S')}")
        
    def add_realtime_activity(self, activity):
        """Ajouter une activit√© temps r√©el"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        formatted_activity = f"[{timestamp}] {activity}"
        
        self.activity_listbox.insert('end', formatted_activity)
        self.activity_listbox.see('end')
        
        # Garder seulement les 50 derni√®res activit√©s
        if self.activity_listbox.size() > 50:
            self.activity_listbox.delete(0)
            
    def create_advanced_sidebar(self):
        """Cr√©er la sidebar avanc√©e"""
        
        # Logo Arsenal am√©lior√©
        logo_frame = tk.Frame(self.sidebar, bg=self.colors['sidebar'])
        logo_frame.pack(fill='x', pady=20)
        
        logo_label = tk.Label(logo_frame, text="üöÄ ARSENAL V4", 
                             font=self.fonts['subtitle'],
                             fg=self.colors['primary'], bg=self.colors['sidebar'])
        logo_label.pack()
        
        subtitle = tk.Label(logo_frame, text="Interface Supr√™me ULTRA", 
                           font=self.fonts['normal'],
                           fg=self.colors['secondary'], bg=self.colors['sidebar'])
        subtitle.pack()
        
        # Version et build
        version_label = tk.Label(logo_frame, text="v2.0 Build 2025.01", 
                                font=self.fonts['small'],
                                fg=self.colors['text'], bg=self.colors['sidebar'])
        version_label.pack(pady=(5, 0))
        
        # Menu principal am√©lior√©
        self.create_menu_section("üéÆ BOT DISCORD", [
            ("üìä Dashboard", self.show_dashboard),
            ("üéµ Syst√®me Musical", self.show_music_system),
            ("üõ°Ô∏è Mod√©ration", self.show_moderation),
            ("‚öôÔ∏è Configuration", self.show_config),
            ("üìà Statistiques", self.show_stats),
            ("üîÑ Red√©marrer Bot", self.restart_bot)
        ])
        
        self.create_menu_section("üåê WEBPANEL", [
            ("üöÄ Lancer Serveur", self.launch_webpanel),
            ("üîß Configuration Web", self.config_webpanel),
            ("üì± Ouvrir Dashboard", self.open_dashboard),
            ("üîç Logs Serveur", self.view_logs),
            ("üìä Analytics Web", self.show_web_analytics)
        ])
        
        self.create_menu_section("üé® CR√âATEUR", [
            ("üéÆ Creator Studio", self.launch_creator_studio),
            ("üé∞ Casino Interface", self.launch_casino),
            ("üîß Outils Admin", self.launch_admin_tools),
            ("üìä Analytics", self.show_analytics),
            ("üé® √âditeur Themes", self.open_theme_editor)
        ])
        
        self.create_menu_section("‚ö° ACTIONS RAPIDES", [
            ("üöÄ D√©marrer Bot", self.start_bot),
            ("‚èπÔ∏è Arr√™ter Bot", self.stop_bot),
            ("üîÑ Red√©marrer", self.restart_bot),
            ("üíæ Backup", self.create_backup),
            ("üîß Maintenance", self.run_maintenance)
        ])
        
        # Section de statut rapide
        self.create_quick_status_section()
        
    def create_quick_status_section(self):
        """Cr√©er la section de statut rapide"""
        status_frame = tk.Frame(self.sidebar, bg=self.colors['card'], relief='raised', bd=1)
        status_frame.pack(fill='x', padx=10, pady=20)
        
        status_title = tk.Label(status_frame, text="‚ö° Statut Rapide", 
                               font=self.fonts['heading'],
                               fg=self.colors['primary'], bg=self.colors['card'])
        status_title.pack(pady=5)
        
        # Indicateurs de statut
        self.status_indicators = {}
        statuses = [
            ("Bot", "bot_status"),
            ("Web", "web_status"),
            ("DB", "db_status"),
            ("API", "api_status")
        ]
        
        for name, key in statuses:
            status_row = tk.Frame(status_frame, bg=self.colors['card'])
            status_row.pack(fill='x', padx=10, pady=2)
            
            label = tk.Label(status_row, text=f"{name}:", 
                            font=self.fonts['small'],
                            fg=self.colors['text'], bg=self.colors['card'])
            label.pack(side='left')
            
            indicator = tk.Label(status_row, text="üü¢ ON", 
                                font=self.fonts['small'],
                                fg=self.colors['success'], bg=self.colors['card'])
            indicator.pack(side='right')
            
            self.status_indicators[key] = indicator

    def create_menu_section(self, title, items):
        """Cr√©er une section de menu am√©lior√©e"""
        
        # Titre de section
        section_frame = tk.Frame(self.sidebar, bg=self.colors['sidebar'])
        section_frame.pack(fill='x', pady=(20, 10))
        
        title_label = tk.Label(section_frame, text=title,
                              font=self.fonts['heading'],
                              fg=self.colors['secondary'], bg=self.colors['sidebar'])
        title_label.pack(anchor='w', padx=10)
        
        # S√©parateur avec d√©grad√©
        separator = tk.Frame(section_frame, height=2, bg=self.colors['primary'])
        separator.pack(fill='x', padx=10, pady=5)
        
        # Items du menu avec effets
        for text, command in items:
            btn = tk.Button(self.sidebar, text=text,
                          command=command,
                          bg=self.colors['card'], fg=self.colors['text'],
                          font=self.fonts['normal'], relief='flat',
                          cursor='hand2', padx=20, pady=10,
                          anchor='w')
            btn.pack(fill='x', padx=10, pady=2)
            
            # Effets hover am√©lior√©s
            def on_enter(e, btn=btn):
                btn.configure(bg=self.colors['primary'], fg=self.colors['background'])
                if self.animations_enabled:
                    self.add_realtime_activity(f"üéØ Survol: {btn['text']}")
                    
            def on_leave(e, btn=btn):
                btn.configure(bg=self.colors['card'], fg=self.colors['text'])
                
            def on_click(e, btn=btn):
                if self.animations_enabled:
                    self.add_realtime_activity(f"üñ±Ô∏è Clic: {btn['text']}")
                    
            btn.bind("<Enter>", on_enter)
            btn.bind("<Leave>", on_leave)
            btn.bind("<Button-1>", on_click)

    def create_dashboard(self):
        """Cr√©er le dashboard principal ULTRA"""
        
        # Clear content
        for widget in self.content.winfo_children():
            widget.destroy()
            
        if LOGGING_ENABLED:
            log_ui_change("gui", "Affichage dashboard ULTRA", {
                "components": ["Header anim√©", "Cards m√©triques", "Graphiques temps r√©el"]
            })
            
        # Header du dashboard
        header = tk.Frame(self.content, bg=self.colors['background'])
        header.pack(fill='x', pady=(0, 20))
        
        title = tk.Label(header, text="üöÄ Arsenal V4 - Dashboard Supr√™me ULTRA",
                        font=self.fonts['title'],
                        fg=self.colors['primary'], bg=self.colors['background'])
        title.pack(side='left')
        
        # Status du bot avec animation
        status_frame = tk.Frame(header, bg=self.colors['background'])
        status_frame.pack(side='right')
        
        if self.bot_client and hasattr(self.bot_client, 'is_ready') and self.bot_client.is_ready():
            status_text = "üü¢ Bot En Ligne"
            status_color = self.colors['success']
        else:
            status_text = "üî¥ Bot Hors Ligne"
            status_color = self.colors['danger']
            
        status_label = tk.Label(status_frame, text=status_text,
                               font=self.fonts['heading'],
                               fg=status_color, bg=self.colors['background'])
        status_label.pack()
        
        # Cards de statistiques ULTRA
        self.create_ultra_stats_cards()
        
        # Section d'activit√© avanc√©e
        self.create_advanced_activity_section()
        
    def create_ultra_stats_cards(self):
        """Cr√©er les cartes de statistiques ULTRA"""
        
        stats_frame = tk.Frame(self.content, bg=self.colors['background'])
        stats_frame.pack(fill='x', pady=20)
        
        # Stats avec vraies donn√©es simul√©es
        stats = [
            ("üñ•Ô∏è", "Serveurs", "3", "+1", self.colors['primary']),
            ("üë•", "Utilisateurs", "42", "+8", self.colors['secondary']),
            ("‚ö°", "Commandes", "1847", "+156", self.colors['accent']),
            ("üéµ", "Musiques", "156", "+12", '#ff6b6b'),
            ("üíæ", "Uptime", "17h", "+3h", self.colors['success']),
            ("üî•", "CPU", "15%", "-2%", self.colors['warning'])
        ]
        
        for i, (icon, label, value, change, color) in enumerate(stats):
            card = tk.Frame(stats_frame, bg=self.colors['card'], relief='raised', bd=3)
            card.pack(side='left', fill='both', expand=True, padx=8, pady=5)
            
            # Ic√¥ne avec style
            icon_label = tk.Label(card, text=icon,
                                 font=('Arial', 28),
                                 fg=color, bg=self.colors['card'])
            icon_label.pack(pady=(15, 5))
            
            # Valeur principale
            value_label = tk.Label(card, text=value,
                                  font=self.fonts['subtitle'],
                                  fg=self.colors['text'], bg=self.colors['card'])
            value_label.pack()
            
            # Label descriptif
            desc_label = tk.Label(card, text=label,
                                 font=self.fonts['normal'],
                                 fg='#888', bg=self.colors['card'])
            desc_label.pack()
            
            # Changement avec couleur
            change_color = self.colors['success'] if change.startswith('+') else self.colors['danger']
            change_label = tk.Label(card, text=change,
                                   font=self.fonts['small'],
                                   fg=change_color, bg=self.colors['card'])
            change_label.pack(pady=(0, 15))
    
    def create_advanced_activity_section(self):
        """Cr√©er la section d'activit√© avanc√©e"""
        
        activity_frame = tk.Frame(self.content, bg=self.colors['card'], relief='raised', bd=2)
        activity_frame.pack(fill='both', expand=True, pady=20)
        
        # Header avec boutons
        header_frame = tk.Frame(activity_frame, bg=self.colors['sidebar'])
        header_frame.pack(fill='x')
        
        header_title = tk.Label(header_frame, text="üìä Activit√© Temps R√©el ULTRA", 
                               font=self.fonts['heading'],
                               fg=self.colors['primary'], bg=self.colors['sidebar'])
        header_title.pack(side='left', padx=15, pady=10)
        
        # Boutons de contr√¥le
        controls_frame = tk.Frame(header_frame, bg=self.colors['sidebar'])
        controls_frame.pack(side='right', padx=15, pady=5)
        
        refresh_btn = tk.Button(controls_frame, text="üîÑ Refresh", 
                               command=self.force_refresh,
                               bg=self.colors['accent'], fg='white', 
                               font=self.fonts['small'], relief='flat')
        refresh_btn.pack(side='right', padx=5)
        
        auto_scroll_var = tk.BooleanVar(value=True)
        auto_scroll_check = tk.Checkbutton(controls_frame, text="Auto-scroll", 
                                          variable=auto_scroll_var,
                                          fg=self.colors['text'], bg=self.colors['sidebar'],
                                          selectcolor=self.colors['card'])
        auto_scroll_check.pack(side='right', padx=10)
        
        # Zone d'activit√© avec onglets
        notebook = ttk.Notebook(activity_frame)
        notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Onglet activit√© g√©n√©rale
        general_frame = tk.Frame(notebook, bg=self.colors['card'])
        notebook.add(general_frame, text="üî• G√©n√©ral")
        
        self.create_activity_list(general_frame, [
            "üöÄ Interface ULTRA d√©marr√©e avec succ√®s",
            "üìä Monitoring temps r√©el activ√©",
            "üé® Th√®me arsenal charg√©",
            "‚ö° Console int√©gr√©e initialis√©e",
            "üîÑ Auto-refresh configur√© (2s)",
            "üõ°Ô∏è Syst√®me de s√©curit√© actif"
        ])
        
        # Onglet logs syst√®me
        logs_frame = tk.Frame(notebook, bg=self.colors['card'])
        notebook.add(logs_frame, text="üìú Logs")
        
        self.create_activity_list(logs_frame, [
            "[INFO] Arsenal GUI V2.0 started",
            "[DEBUG] Theme system initialized", 
            "[INFO] Real-time monitoring active",
            "[DEBUG] Console commands registered",
            "[INFO] All systems operational"
        ])
        
        # Onglet performances
        perf_frame = tk.Frame(notebook, bg=self.colors['card'])
        notebook.add(perf_frame, text="‚ö° Performance")
        
        self.create_performance_metrics(perf_frame)
        
    def create_activity_list(self, parent, initial_items):
        """Cr√©er une liste d'activit√©"""
        
        list_frame = tk.Frame(parent, bg=self.colors['card'])
        list_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side='right', fill='y')
        
        listbox = tk.Listbox(list_frame,
                            bg=self.colors['background'], 
                            fg=self.colors['text'],
                            font=self.fonts['small'],
                            yscrollcommand=scrollbar.set,
                            selectbackground=self.colors['primary'])
        listbox.pack(fill='both', expand=True)
        scrollbar.config(command=listbox.yview)
        
        for item in initial_items:
            listbox.insert('end', item)
            
        return listbox
        
    def create_performance_metrics(self, parent):
        """Cr√©er les m√©triques de performance"""
        
        # Simuler des graphiques avec des barres ASCII
        metrics_text = tk.Text(parent, 
                              bg=self.colors['background'], 
                              fg=self.colors['text'],
                              font=('Courier', 9),
                              state='disabled')
        metrics_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Contenu des m√©triques
        metrics_content = """
üìä M√âTRIQUES DE PERFORMANCE TEMPS R√âEL

CPU Usage:     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë  15%  [Normal]
RAM Usage:     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë  60%  [Normal] 
Disk I/O:      ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  25%  [Low]
Network:       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë  35%  [Normal]

üîÑ Refresh Rate: 2000ms
‚ö° Interface FPS: 60
üéØ Response Time: <50ms

üìà TENDANCES (5 min):
  CPU: ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚ñ≤‚îÄ‚îÄ‚ñº‚ñº‚îÄ‚îÄ (Stable)
  RAM: ‚îÄ‚îÄ‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚ñ≤‚îÄ‚îÄ (Croissant)
  NET: ‚ñº‚ñº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ≤‚ñ≤‚îÄ‚îÄ (Variable)
"""
        
        metrics_text.configure(state='normal')
        metrics_text.insert('end', metrics_content)
        metrics_text.configure(state='disabled')

    # ==================== M√âTHODES D'ACTION AM√âLIOR√âES ====================
    
    def force_refresh(self):
        """Forcer une actualisation"""
        self.log_to_console("üîÑ Actualisation forc√©e...")
        self.add_realtime_activity("üîÑ Actualisation manuelle d√©clench√©e")
        
    def show_web_analytics(self):
        """Afficher les analytics web"""
        self.log_to_console("üìä Ouverture analytics web...")
        webbrowser.open("http://127.0.0.1:8080/analytics")
        
    def open_theme_editor(self):
        """Ouvrir l'√©diteur de th√®mes"""
        self.log_to_console("üé® Ouverture √©diteur de th√®mes...")
        messagebox.showinfo("üé® √âditeur Th√®mes", 
                           "√âditeur de th√®mes personnalis√©s\n\n"
                           "Fonctionnalit√©s:\n"
                           "‚Ä¢ Cr√©ation de th√®mes custom\n"
                           "‚Ä¢ Pr√©visualisation temps r√©el\n"
                           "‚Ä¢ Export/Import de th√®mes")
        
    def run_maintenance(self):
        """Lancer la maintenance syst√®me"""
        if messagebox.askyesno("üîß Maintenance", 
                              "Lancer la maintenance syst√®me ?\n\n"
                              "‚Ä¢ Nettoyage des logs\n"
                              "‚Ä¢ Optimisation base de donn√©es\n"
                              "‚Ä¢ V√©rification int√©grit√©"):
            self.log_to_console("üîß Maintenance syst√®me d√©marr√©e...")
            self.add_realtime_activity("üîß Maintenance automatique en cours")
            
            # Simuler la maintenance
            self.root.after(3000, lambda: self.log_to_console("‚úÖ Maintenance termin√©e avec succ√®s"))

    def show_dashboard(self):
        """Afficher le dashboard"""
        self.create_dashboard()
        self.add_realtime_activity("üìä Dashboard affich√©")
        
    def show_music_system(self):
        """Afficher le syst√®me musical"""
        self.log_to_console("üéµ Ouverture syst√®me musical...")
        messagebox.showinfo("üéµ Syst√®me Musical", 
                           "Contr√¥leur musical Arsenal:\n\n"
                           "‚Ä¢ Lecteur audio int√©gr√©\n"
                           "‚Ä¢ File d'attente intelligente\n"
                           "‚Ä¢ Effets et filtres\n"
                           "‚Ä¢ Streaming multi-serveurs")
    
    def show_moderation(self):
        """Afficher les outils de mod√©ration"""
        self.log_to_console("üõ°Ô∏è Ouverture outils mod√©ration...")
        messagebox.showinfo("üõ°Ô∏è Mod√©ration ULTRA", 
                           "Outils de mod√©ration avanc√©s:\n\n"
                           "‚Ä¢ Auto-mod√©ration IA\n"
                           "‚Ä¢ Syst√®me d'avertissements\n"
                           "‚Ä¢ Bannissements temporaires\n"
                           "‚Ä¢ Logs d√©taill√©s\n"
                           "‚Ä¢ Analytics mod√©ration")
    
    def show_config(self):
        """Afficher la configuration"""
        self.log_to_console("‚öôÔ∏è Ouverture configuration...")
        messagebox.showinfo("‚öôÔ∏è Configuration ULTRA", 
                           "Configuration avanc√©e:\n\n"
                           "‚Ä¢ Param√®tres bot\n"
                           "‚Ä¢ Permissions granulaires\n"
                           "‚Ä¢ Modules syst√®me\n"
                           "‚Ä¢ Int√©grations externes\n"
                           "‚Ä¢ Backup automatique")
    
    def show_stats(self):
        """Afficher les statistiques d√©taill√©es"""
        self.log_to_console("üìà Ouverture statistiques...")
        messagebox.showinfo("üìà Statistiques ULTRA", 
                           "Analytics et statistiques:\n\n"
                           "‚Ä¢ Usage des commandes\n"
                           "‚Ä¢ Activit√© utilisateurs\n"
                           "‚Ä¢ Performance syst√®me\n"
                           "‚Ä¢ Tendances temporelles\n"
                           "‚Ä¢ Rapports exportables")
    
    def launch_webpanel(self):
        """Lancer le serveur webpanel"""
        try:
            self.log_to_console("üöÄ D√©marrage serveur webpanel...")
            threading.Thread(target=self._start_webpanel_server, daemon=True).start()
            self.add_realtime_activity("üåê Serveur webpanel d√©marr√©")
            messagebox.showinfo("üöÄ Webpanel ULTRA", 
                               "Serveur webpanel en cours de d√©marrage...\n\n"
                               "URL: http://127.0.0.1:8080\n"
                               "Interface: /advanced_interface.html\n"
                               "Casino: /casino.html")
        except Exception as e:
            self.log_to_console(f"‚ùå Erreur webpanel: {e}")
            messagebox.showerror("‚ùå Erreur", f"Impossible de lancer le webpanel:\n{e}")
    
    def _start_webpanel_server(self):
        """D√©marrer le serveur webpanel en arri√®re-plan"""
        try:
            subprocess.run([
                sys.executable, 
                "Arsenal_V4/webpanel/backend/advanced_server.py"
            ], cwd="a:/Arsenal_bot")
        except Exception as e:
            self.log_to_console(f"‚ùå Erreur serveur webpanel: {e}")
    
    def config_webpanel(self):
        """Configurer le webpanel"""
        self.log_to_console("üîß Configuration webpanel...")
        messagebox.showinfo("üîß Config Webpanel ULTRA", 
                           "Configuration webpanel avanc√©e:\n\n"
                           "‚Ä¢ OAuth Discord\n"
                           "‚Ä¢ Base de donn√©es\n"
                           "‚Ä¢ S√©curit√© renforc√©e\n"
                           "‚Ä¢ API endpoints\n"
                           "‚Ä¢ SSL/TLS")
    
    def open_dashboard(self):
        """Ouvrir le dashboard web"""
        self.log_to_console("üì± Ouverture dashboard web...")
        webbrowser.open("http://127.0.0.1:8080/advanced_interface.html")
        self.add_realtime_activity("üì± Dashboard web ouvert")
        messagebox.showinfo("üì± Dashboard", "Dashboard web ouvert dans le navigateur !")
    
    def view_logs(self):
        """Voir les logs du serveur"""
        self.log_to_console("üîç Consultation logs serveur...")
        messagebox.showinfo("üîç Logs ULTRA", 
                           "Syst√®me de logs avanc√©:\n\n"
                           "‚Ä¢ Logs en temps r√©el\n"
                           "‚Ä¢ Filtrage multi-crit√®res\n"
                           "‚Ä¢ Recherche intelligente\n"
                           "‚Ä¢ Export formats multiples\n"
                           "‚Ä¢ Alertes automatiques")
    
    def launch_creator_studio(self):
        """Lancer Creator Studio"""
        self.log_to_console("üéÆ Lancement Creator Studio...")
        messagebox.showinfo("üéÆ Creator Studio ULTRA", 
                           "Creator Studio Arsenal:\n\n"
                           "‚Ä¢ Interface drag & drop\n"
                           "‚Ä¢ √âditeur de commandes\n"
                           "‚Ä¢ Designer d'embeds\n"
                           "‚Ä¢ G√©n√©rateur d'√©v√©nements\n"
                           "‚Ä¢ Preview temps r√©el")
    
    def launch_casino(self):
        """Lancer l'interface casino"""
        self.log_to_console("üé∞ Ouverture casino...")
        webbrowser.open("http://127.0.0.1:8080/casino.html")
        self.add_realtime_activity("üé∞ Casino ouvert")
        messagebox.showinfo("üé∞ Casino ULTRA", "Interface casino ouverte dans le navigateur !")
    
    def launch_admin_tools(self):
        """Lancer les outils admin"""
        try:
            self.log_to_console("üîß Lancement outils admin...")
            from gui.ArsenalAdminGui import ArsenalAdminPanel
            admin_panel = ArsenalAdminPanel("creator", "global", lambda: {})
            admin_panel.mainloop()
        except Exception as e:
            self.log_to_console(f"‚ùå Erreur admin tools: {e}")
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir admin tools:\n{e}")
    
    def show_analytics(self):
        """Afficher les analytics"""
        self.log_to_console("üìä Ouverture analytics...")
        messagebox.showinfo("üìä Analytics ULTRA", 
                           "Analytics avanc√©es Arsenal:\n\n"
                           "‚Ä¢ M√©triques temps r√©el\n"
                           "‚Ä¢ Graphiques interactifs\n"
                           "‚Ä¢ Machine Learning\n"
                           "‚Ä¢ Pr√©dictions tendances\n"
                           "‚Ä¢ Rapports automatis√©s")
    
    def start_bot(self):
        """D√©marrer le bot"""
        self.log_to_console("üöÄ D√©marrage bot Discord...")
        if self.bot_client:
            messagebox.showinfo("üöÄ Bot", "Bot d√©j√† en cours d'ex√©cution !")
        else:
            threading.Thread(target=self._start_bot_process, daemon=True).start()
            self.add_realtime_activity("ü§ñ Bot Discord en cours de d√©marrage")
            messagebox.showinfo("üöÄ Bot ULTRA", "D√©marrage du bot en cours...")
    
    def _start_bot_process(self):
        """D√©marrer le processus du bot"""
        try:
            subprocess.run([sys.executable, "main.py"], cwd="a:/Arsenal_bot")
        except Exception as e:
            self.log_to_console(f"‚ùå Erreur d√©marrage bot: {e}")
    
    def stop_bot(self):
        """Arr√™ter le bot"""
        if messagebox.askyesno("‚èπÔ∏è Arr√™ter Bot", "Voulez-vous vraiment arr√™ter le bot ?"):
            self.log_to_console("‚èπÔ∏è Arr√™t du bot...")
            self.add_realtime_activity("ü§ñ Bot Discord arr√™t√©")
            messagebox.showinfo("‚èπÔ∏è Bot", "Bot arr√™t√© avec succ√®s !")
    
    def restart_bot(self):
        """Red√©marrer le bot"""
        if messagebox.askyesno("üîÑ Red√©marrer", "Voulez-vous red√©marrer le bot ?"):
            self.log_to_console("üîÑ Red√©marrage bot...")
            self.add_realtime_activity("üîÑ Red√©marrage bot en cours")
            messagebox.showinfo("üîÑ Bot", "Red√©marrage en cours...")
    
    def create_backup(self):
        """Cr√©er une sauvegarde"""
        backup_dir = filedialog.askdirectory(title="Choisir le dossier de sauvegarde")
        if backup_dir:
            self.log_to_console(f"üíæ Cr√©ation backup dans {backup_dir}...")
            self.add_realtime_activity("üíæ Backup syst√®me cr√©√©")
            messagebox.showinfo("üíæ Backup ULTRA", 
                               f"Sauvegarde cr√©√©e dans:\n{backup_dir}\n\n"
                               "Contenu sauvegard√©:\n"
                               "‚Ä¢ Configuration compl√®te\n"
                               "‚Ä¢ Base de donn√©es\n"
                               "‚Ä¢ Assets et m√©dias\n"
                               "‚Ä¢ Logs syst√®me\n"
                               "‚Ä¢ Th√®mes personnalis√©s")
    
    def run(self):
        """Lancer l'interface ULTRA"""
        if LOGGING_ENABLED:
            log_feature("gui", "Interface supr√™me ULTRA lanc√©e", {
                "version": "2.0",
                "features": ["Console int√©gr√©e", "Monitoring temps r√©el", "Multi-th√®mes", "Animations"]
            }, "high")
            
        self.log_to_console("üöÄ Arsenal V4 Interface ULTRA - Pr√™te !")
        self.root.mainloop()

def lancer_super_interface(bot_client=None):
    """Point d'entr√©e pour lancer l'interface supr√™me ULTRA"""
    try:
        if LOGGING_ENABLED:
            log_feature("gui", "D√©marrage interface supr√™me ULTRA", {
                "entry_point": "lancer_super_interface",
                "bot_client": bot_client is not None
            })
            
        app = ArsenalSuperInterfaceUltra(bot_client)
        app.run()
    except Exception as e:
        print(f"‚ùå Erreur interface supr√™me: {e}")
        if LOGGING_ENABLED:
            log_ui_change("gui", f"Erreur critique interface: {e}", {
                "error": str(e),
                "traceback": str(e)
            }, "critical")

if __name__ == "__main__":
    lancer_super_interface()
        """Cr√©er la sidebar avec toutes les options"""
        
        # Logo Arsenal
        logo_frame = tk.Frame(self.sidebar, bg=self.colors['sidebar'])
        logo_frame.pack(fill='x', pady=20)
        
        logo_label = tk.Label(logo_frame, text="üöÄ ARSENAL V4", 
                             font=('Orbitron', 16, 'bold'),
                             fg=self.colors['primary'], bg=self.colors['sidebar'])
        logo_label.pack()
        
        subtitle = tk.Label(logo_frame, text="Interface Supr√™me", 
                           font=('Arial', 10),
                           fg=self.colors['secondary'], bg=self.colors['sidebar'])
        subtitle.pack()
        
        # Menu principal
        self.create_menu_section("üéÆ BOT DISCORD", [
            ("üìä Dashboard", self.show_dashboard),
            ("üéµ Syst√®me Musical", self.show_music_system),
            ("üõ°Ô∏è Mod√©ration", self.show_moderation),
            ("‚öôÔ∏è Configuration", self.show_config),
            ("üìà Statistiques", self.show_stats)
        ])
        
        self.create_menu_section("üåê WEBPANEL", [
            ("üöÄ Lancer Serveur", self.launch_webpanel),
            ("üîß Configuration Web", self.config_webpanel),
            ("üì± Ouvrir Dashboard", self.open_dashboard),
            ("üîç Logs Serveur", self.view_logs)
        ])
        
        self.create_menu_section("üé® CR√âATEUR", [
            ("üéÆ Creator Studio", self.launch_creator_studio),
            ("üé∞ Casino Interface", self.launch_casino),
            ("üîß Outils Admin", self.launch_admin_tools),
            ("üìä Analytics", self.show_analytics)
        ])
        
        self.create_menu_section("‚ö° ACTIONS RAPIDES", [
            ("üöÄ D√©marrer Bot", self.start_bot),
            ("‚èπÔ∏è Arr√™ter Bot", self.stop_bot),
            ("üîÑ Red√©marrer", self.restart_bot),
            ("üíæ Backup", self.create_backup)
        ])
        
    def create_menu_section(self, title, items):
        """Cr√©er une section de menu"""
        
        # Titre de section
        section_frame = tk.Frame(self.sidebar, bg=self.colors['sidebar'])
        section_frame.pack(fill='x', pady=(20, 10))
        
        title_label = tk.Label(section_frame, text=title,
                              font=('Arial', 12, 'bold'),
                              fg=self.colors['secondary'], bg=self.colors['sidebar'])
        title_label.pack(anchor='w')
        
        # S√©parateur
        separator = tk.Frame(section_frame, height=2, bg=self.colors['primary'])
        separator.pack(fill='x', pady=5)
        
        # Items du menu
        for text, command in items:
            btn = tk.Button(self.sidebar, text=text,
                          command=command,
                          bg=self.colors['card'], fg=self.colors['text'],
                          font=('Arial', 10), relief='flat',
                          cursor='hand2', padx=20, pady=8)
            btn.pack(fill='x', padx=10, pady=2)
            
            # Effet hover
            def on_enter(e, btn=btn):
                btn.configure(bg=self.colors['primary'])
            def on_leave(e, btn=btn):
                btn.configure(bg=self.colors['card'])
                
            btn.bind("<Enter>", on_enter)
            btn.bind("<Leave>", on_leave)
    
    def create_dashboard(self):
        """Cr√©er le dashboard principal"""
        
        # Clear content
        for widget in self.content.winfo_children():
            widget.destroy()
            
        # Header
        header = tk.Frame(self.content, bg=self.colors['background'])
        header.pack(fill='x', pady=(0, 20))
        
        title = tk.Label(header, text="üöÄ Arsenal V4 - Dashboard Supr√™me",
                        font=('Orbitron', 24, 'bold'),
                        fg=self.colors['primary'], bg=self.colors['background'])
        title.pack(side='left')
        
        # Status du bot
        status_frame = tk.Frame(header, bg=self.colors['background'])
        status_frame.pack(side='right')
        
        if self.bot_client and hasattr(self.bot_client, 'is_ready') and self.bot_client.is_ready():
            status_text = "üü¢ Bot En Ligne"
            status_color = self.colors['secondary']
        else:
            status_text = "üî¥ Bot Hors Ligne"
            status_color = '#ff4444'
            
        status_label = tk.Label(status_frame, text=status_text,
                               font=('Arial', 14, 'bold'),
                               fg=status_color, bg=self.colors['background'])
        status_label.pack()
        
        # Cards de statistiques
        self.create_stats_cards()
        
        # Activit√© r√©cente
        self.create_activity_section()
        
    def create_stats_cards(self):
        """Cr√©er les cartes de statistiques"""
        
        stats_frame = tk.Frame(self.content, bg=self.colors['background'])
        stats_frame.pack(fill='x', pady=20)
        
        # Stats simul√©es (√† connecter aux vraies donn√©es)
        stats = [
            ("üñ•Ô∏è Serveurs", "3", self.colors['primary']),
            ("üë• Utilisateurs", "42", self.colors['secondary']),
            ("‚ö° Commandes", "1847", self.colors['accent']),
            ("üéµ Musiques", "156", '#ff6b6b')
        ]
        
        for i, (icon_text, value, color) in enumerate(stats):
            card = tk.Frame(stats_frame, bg=self.colors['card'], relief='raised', bd=2)
            card.pack(side='left', fill='both', expand=True, padx=10)
            
            icon_label = tk.Label(card, text=icon_text.split()[0],
                                 font=('Arial', 24),
                                 fg=color, bg=self.colors['card'])
            icon_label.pack(pady=10)
            
            value_label = tk.Label(card, text=value,
                                  font=('Orbitron', 20, 'bold'),
                                  fg=self.colors['text'], bg=self.colors['card'])
            value_label.pack()
            
            desc_label = tk.Label(card, text=icon_text.split()[1],
                                 font=('Arial', 12),
                                 fg='#888', bg=self.colors['card'])
            desc_label.pack(pady=(0, 10))
    
    def create_activity_section(self):
        """Cr√©er la section d'activit√© r√©cente"""
        
        activity_frame = tk.Frame(self.content, bg=self.colors['card'], relief='raised', bd=2)
        activity_frame.pack(fill='both', expand=True, pady=20)
        
        # Header
        header = tk.Label(activity_frame, text="üìä Activit√© R√©cente",
                         font=('Arial', 16, 'bold'),
                         fg=self.colors['primary'], bg=self.colors['card'])
        header.pack(pady=10)
        
        # Liste d'activit√©s (simul√©e)
        activities = [
            "üéµ Lecture de 'Never Gonna Give You Up' - il y a 2 min",
            "üë• Nouveau membre rejoint: @user123 - il y a 5 min",
            "‚ö° Commande !ping ex√©cut√©e - il y a 8 min",
            "üõ°Ô∏è Message mod√©r√© dans #g√©n√©ral - il y a 12 min",
            "üéÆ D√©marrage du bot - il y a 1h"
        ]
        
        for activity in activities:
            activity_label = tk.Label(activity_frame, text=activity,
                                     font=('Arial', 10),
                                     fg=self.colors['text'], bg=self.colors['card'],
                                     anchor='w')
            activity_label.pack(fill='x', padx=20, pady=2)
    
    # ==================== M√âTHODES D'ACTION ====================
    
    def show_dashboard(self):
        """Afficher le dashboard"""
        self.create_dashboard()
        
    def show_music_system(self):
        """Afficher le syst√®me musical"""
        messagebox.showinfo("üéµ Syst√®me Musical", 
                           "Ouverture du contr√¥leur musical...\n\n"
                           "‚Ä¢ Lecteur audio\n"
                           "‚Ä¢ File d'attente\n"
                           "‚Ä¢ Contr√¥les avanc√©s")
    
    def show_moderation(self):
        """Afficher les outils de mod√©ration"""
        messagebox.showinfo("üõ°Ô∏è Mod√©ration", 
                           "Outils de mod√©ration:\n\n"
                           "‚Ä¢ Avertissements\n"
                           "‚Ä¢ Bannissements\n"
                           "‚Ä¢ Auto-mod√©ration")
    
    def show_config(self):
        """Afficher la configuration"""
        messagebox.showinfo("‚öôÔ∏è Configuration", 
                           "Configuration du bot:\n\n"
                           "‚Ä¢ Param√®tres g√©n√©raux\n"
                           "‚Ä¢ Permissions\n"
                           "‚Ä¢ Modules")
    
    def show_stats(self):
        """Afficher les statistiques d√©taill√©es"""
        messagebox.showinfo("üìà Statistiques", 
                           "Statistiques d√©taill√©es:\n\n"
                           "‚Ä¢ Usage des commandes\n"
                           "‚Ä¢ Activit√© utilisateurs\n"
                           "‚Ä¢ Performance")
    
    def launch_webpanel(self):
        """Lancer le serveur webpanel"""
        try:
            # Lancer en arri√®re-plan
            threading.Thread(target=self._start_webpanel_server, daemon=True).start()
            messagebox.showinfo("üöÄ Webpanel", 
                               "Serveur webpanel en cours de d√©marrage...\n\n"
                               "URL: http://127.0.0.1:8080\n"
                               "Interface: /advanced_interface.html")
        except Exception as e:
            messagebox.showerror("‚ùå Erreur", f"Impossible de lancer le webpanel:\n{e}")
    
    def _start_webpanel_server(self):
        """D√©marrer le serveur webpanel en arri√®re-plan"""
        try:
            import subprocess
            subprocess.run([
                sys.executable, 
                "Arsenal_V4/webpanel/backend/advanced_server.py"
            ], cwd="a:/Arsenal_bot")
        except Exception as e:
            print(f"Erreur serveur webpanel: {e}")
    
    def config_webpanel(self):
        """Configurer le webpanel"""
        messagebox.showinfo("üîß Config Webpanel", 
                           "Configuration webpanel:\n\n"
                           "‚Ä¢ OAuth Discord\n"
                           "‚Ä¢ Base de donn√©es\n"
                           "‚Ä¢ S√©curit√©")
    
    def open_dashboard(self):
        """Ouvrir le dashboard web"""
        webbrowser.open("http://127.0.0.1:8080/advanced_interface.html")
        messagebox.showinfo("üì± Dashboard", "Dashboard ouvert dans le navigateur !")
    
    def view_logs(self):
        """Voir les logs du serveur"""
        messagebox.showinfo("üîç Logs", 
                           "Affichage des logs serveur:\n\n"
                           "‚Ä¢ Logs en temps r√©el\n"
                           "‚Ä¢ Filtrage par niveau\n"
                           "‚Ä¢ Export possible")
    
    def launch_creator_studio(self):
        """Lancer Creator Studio"""
        messagebox.showinfo("üéÆ Creator Studio", 
                           "Lancement de Creator Studio...\n\n"
                           "Interface de cr√©ation avanc√©e")
    
    def launch_casino(self):
        """Lancer l'interface casino"""
        webbrowser.open("http://127.0.0.1:8080/casino.html")
        messagebox.showinfo("üé∞ Casino", "Interface casino ouverte !")
    
    def launch_admin_tools(self):
        """Lancer les outils admin"""
        try:
            from gui.ArsenalAdminGui import ArsenalAdminPanel
            admin_panel = ArsenalAdminPanel("creator", "global", lambda: {})
            admin_panel.mainloop()
        except Exception as e:
            messagebox.showerror("‚ùå Erreur", f"Impossible d'ouvrir admin tools:\n{e}")
    
    def show_analytics(self):
        """Afficher les analytics"""
        messagebox.showinfo("üìä Analytics", 
                           "Analytics avanc√©es:\n\n"
                           "‚Ä¢ M√©triques d√©taill√©es\n"
                           "‚Ä¢ Graphiques temps r√©el\n"
                           "‚Ä¢ Rapports")
    
    def start_bot(self):
        """D√©marrer le bot"""
        if self.bot_client:
            messagebox.showinfo("üöÄ Bot", "Bot d√©j√† en cours d'ex√©cution !")
        else:
            threading.Thread(target=self._start_bot_process, daemon=True).start()
            messagebox.showinfo("üöÄ Bot", "D√©marrage du bot en cours...")
    
    def _start_bot_process(self):
        """D√©marrer le processus du bot"""
        try:
            subprocess.run([sys.executable, "main.py"], cwd="a:/Arsenal_bot")
        except Exception as e:
            print(f"Erreur d√©marrage bot: {e}")
    
    def stop_bot(self):
        """Arr√™ter le bot"""
        if messagebox.askyesno("‚èπÔ∏è Arr√™ter Bot", "Voulez-vous vraiment arr√™ter le bot ?"):
            # Logique d'arr√™t
            messagebox.showinfo("‚èπÔ∏è Bot", "Bot arr√™t√© avec succ√®s !")
    
    def restart_bot(self):
        """Red√©marrer le bot"""
        if messagebox.askyesno("üîÑ Red√©marrer", "Voulez-vous red√©marrer le bot ?"):
            messagebox.showinfo("üîÑ Bot", "Red√©marrage en cours...")
    
    def create_backup(self):
        """Cr√©er une sauvegarde"""
        backup_dir = filedialog.askdirectory(title="Choisir le dossier de sauvegarde")
        if backup_dir:
            messagebox.showinfo("üíæ Backup", 
                               f"Sauvegarde cr√©√©e dans:\n{backup_dir}\n\n"
                               "Contenu sauvegard√©:\n"
                               "‚Ä¢ Configuration\n"
                               "‚Ä¢ Base de donn√©es\n"
                               "‚Ä¢ Assets")
    
    def run(self):
        """Lancer l'interface"""
        self.root.mainloop()

def lancer_super_interface(bot_client=None):
    """Point d'entr√©e pour lancer l'interface supr√™me"""
    try:
        app = ArsenalSuperInterface(bot_client)
        app.run()
    except Exception as e:
        print(f"‚ùå Erreur interface supr√™me: {e}")

if __name__ == "__main__":
    lancer_super_interface()
