#!/usr/bin/env python3
"""
üöÄ Arsenal Simple Starter for Render
Lance le bot Discord ET le webpanel simultan√©ment
"""

import os
import sys
import subprocess
import time
import threading
import signal

def log(msg):
    """Logger avec timestamp"""
    timestamp = time.strftime("%H:%M:%S")
    print(f"[{timestamp}] [ARSENAL] {msg}", flush=True)

def start_bot():
    """D√©marrer le bot Discord en arri√®re-plan"""
    try:
        # V√©rifier les pr√©requis
        if not os.environ.get('DISCORD_TOKEN'):
            log("‚ùå DISCORD_TOKEN manquant - Bot non d√©marr√©")
            return None
            
        if not os.path.exists('main.py'):
            log("‚ùå main.py manquant - Bot non d√©marr√©")
            return None
        
        log("ü§ñ D√©marrage Bot Discord...")
        
        # Cr√©er l'environnement pour le bot
        bot_env = os.environ.copy()
        bot_env['PYTHONUNBUFFERED'] = '1'
        
        # Lancer le bot
        bot_process = subprocess.Popen(
            [sys.executable, 'main.py'],
            env=bot_env,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            bufsize=1
        )
        
        log(f"‚úÖ Bot process d√©marr√©: PID {bot_process.pid}")
        
        # Monitorer le d√©marrage pendant 10 secondes
        for i in range(10):
            if bot_process.poll() is not None:
                # Le bot s'est arr√™t√©
                stdout, _ = bot_process.communicate()
                log(f"‚ùå Bot termin√© pr√©matur√©ment")
                log(f"Output: {stdout[:500]}...")
                return None
            time.sleep(1)
        
        log("‚úÖ Bot semble d√©marr√© avec succ√®s!")
        return bot_process
        
    except Exception as e:
        log(f"‚ùå Erreur d√©marrage bot: {e}")
        return None

def monitor_bot(bot_process):
    """Monitorer le bot et red√©marrer si n√©cessaire"""
    if not bot_process:
        return
        
    log("üîç Monitoring du bot d√©marr√©")
    
    try:
        while True:
            time.sleep(30)  # V√©rifier toutes les 30s
            
            if bot_process.poll() is not None:
                log("‚ùå Bot s'est arr√™t√©, tentative de red√©marrage...")
                bot_process = start_bot()
                if not bot_process:
                    log("‚ùå Impossible de red√©marrer le bot")
                    break
    except Exception as e:
        log(f"‚ùå Erreur monitoring: {e}")

def main():
    """Point d'entr√©e principal"""
    log("üöÄ Arsenal Simple Starter d√©marr√©")
    log(f"üîß Python version: {sys.version}")
    log(f"üìÅ Working directory: {os.getcwd()}")
    
    # V√©rifier les fichiers essentiels
    essential_files = ['main.py', 'advanced_server.py']
    for file in essential_files:
        if os.path.exists(file):
            log(f"‚úÖ {file} trouv√©")
        else:
            log(f"‚ùå {file} manquant")
    
    # Variables d'environnement importantes
    log(f"üîë DISCORD_TOKEN: {'‚úÖ Pr√©sent' if os.environ.get('DISCORD_TOKEN') else '‚ùå Manquant'}")
    log(f"üåç PORT: {os.environ.get('PORT', '10000')}")
    
    # D√©marrer le bot Discord en arri√®re-plan
    bot_process = start_bot()
    
    if bot_process:
        # D√©marrer le monitoring en thread
        monitor_thread = threading.Thread(target=monitor_bot, args=(bot_process,), daemon=True)
        monitor_thread.start()
        log("‚úÖ Bot monitoring activ√©")
    else:
        log("‚ö†Ô∏è Bot non d√©marr√© - continuer avec webpanel seulement")
    
    # Attendre un peu
    time.sleep(2)
    
    # D√©marrer le webpanel (bloquant)
    log("üåê D√©marrage WebPanel...")
    
    try:
        # Configurer l'environnement Flask
        os.environ.setdefault('FLASK_ENV', 'production')
        os.environ.setdefault('PYTHONUNBUFFERED', '1')
        
        # Lancer advanced_server.py directement
        import advanced_server
        
        # Le serveur se lance automatiquement
        log("‚úÖ WebPanel d√©marr√© via import")
        
    except Exception as e:
        log(f"‚ùå Erreur webpanel: {e}")
        
        # Fallback: lancer en subprocess
        try:
            log("üîÑ Fallback: Lancement webpanel en subprocess...")
            subprocess.run([sys.executable, 'advanced_server.py'])
        except Exception as e2:
            log(f"‚ùå Erreur fallback: {e2}")
            sys.exit(1)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        log("üëã Arr√™t demand√©")
        sys.exit(0)
    except Exception as e:
        log(f"‚ùå Erreur critique: {e}")
        sys.exit(1)
