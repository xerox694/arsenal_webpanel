# ================================================================
# üßπ ARSENAL CLEANUP SCRIPT - NETTOYAGE COMPLET
# ================================================================
# Supprime tous les fichiers test*, start*, et autres brouillons
# Garde seulement les ORIGINAUX identifi√©s
# ================================================================

Write-Host "üßπ ARSENAL CLEANUP - Debut du nettoyage..." -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Yellow

# Compteur pour les statistiques
$FilesDeleted = 0
$TotalSize = 0

# ================================================================
# FONCTION DE SUPPRESSION S√âCURIS√âE
# ================================================================
function Remove-SafeFile {
    param($FilePath, $Description)
    
    if (Test-Path $FilePath) {
        $size = (Get-Item $FilePath).Length
        $global:TotalSize += $size
        $global:FilesDeleted++
        
        Write-Host "‚ùå Suppression: $Description" -ForegroundColor Red
        Write-Host "   ‚îî‚îÄ‚îÄ $FilePath" -ForegroundColor Gray
        Remove-Item $FilePath -Force
    }
}

# ================================================================
# SUPPRESSION FICHIERS TEST*
# ================================================================
Write-Host "`nüéØ Suppression des fichiers TEST*..." -ForegroundColor Yellow

Get-ChildItem -Path "a:\Arsenal_bot" -Recurse -File | Where-Object { 
    $_.Name -match "^test" 
} | ForEach-Object {
    Remove-SafeFile $_.FullName "Test file: $($_.Name)"
}

# ================================================================
# SUPPRESSION FICHIERS START*
# ================================================================
Write-Host "`nüéØ Suppression des fichiers START*..." -ForegroundColor Yellow

Get-ChildItem -Path "a:\Arsenal_bot" -Recurse -File | Where-Object { 
    $_.Name -match "^start" 
} | ForEach-Object {
    Remove-SafeFile $_.FullName "Start script: $($_.Name)"
}

# ================================================================
# CR√âATION DOSSIER BACKUP
# ================================================================
Write-Host "`nüì¶ Cr√©ation du dossier BACKUP..." -ForegroundColor Green

$BackupDir = "a:\Arsenal_bot\BACKUP_FILES"
if (-not (Test-Path $BackupDir)) {
    New-Item -ItemType Directory -Path $BackupDir -Force
    Write-Host "‚úÖ Dossier BACKUP_FILES cr√©√©" -ForegroundColor Green
}

# ================================================================
# D√âPLACEMENT FICHIERS APP* NON ORIGINAUX VERS BACKUP
# ================================================================
Write-Host "`nüéØ D√©placement des fichiers APP* cr√©√©s apr√®s le 27/07/2025 vers BACKUP..." -ForegroundColor Yellow

$KeepApps = @("advanced_server.py", "app_corrupted.py") # Les 2 originaux identifi√©s

Get-ChildItem -Path "a:\Arsenal_bot\Arsenal_V4\webpanel\backend" -File | Where-Object { 
    $_.Name -match "^app" -and 
    $_.Name -notin $KeepApps -and
    $_.CreationTime -gt (Get-Date "27/07/2025 23:59:59")
} | ForEach-Object {
    $dest = Join-Path $BackupDir $_.Name
    Move-Item $_.FullName $dest -Force
    Write-Host "üì¶ D√©plac√© vers BACKUP: $($_.Name)" -ForegroundColor Blue
}

# ================================================================
# D√âPLACEMENT BROUILLONS VERS BACKUP
# ================================================================
Write-Host "`nüéØ D√©placement des brouillons vers BACKUP..." -ForegroundColor Yellow

$BrouillonPatterns = @(
    "*revolutionary*",
    "*backup*", 
    "*_old*",
    "*_new*",
    "*_clean*",
    "*_fixed*",
    "*temp*",
    "*tmp*"
)

foreach ($pattern in $BrouillonPatterns) {
    Get-ChildItem -Path "a:\Arsenal_bot" -Recurse -File | Where-Object { 
        $_.Name -like $pattern -and $_.FullName -notlike "*BACKUP_FILES*"
    } | ForEach-Object {
        $dest = Join-Path $BackupDir $_.Name
        # Si le fichier existe d√©j√†, ajouter un timestamp
        if (Test-Path $dest) {
            $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
            $name = [System.IO.Path]::GetFileNameWithoutExtension($_.Name)
            $ext = [System.IO.Path]::GetExtension($_.Name)
            $dest = Join-Path $BackupDir "$name`_$timestamp$ext"
        }
        Move-Item $_.FullName $dest -Force
        Write-Host "üì¶ Brouillon vers BACKUP: $($_.Name)" -ForegroundColor Blue
    }
}

# ================================================================
# SUPPRESSION DOSSIERS VIDES
# ================================================================
Write-Host "`nüéØ Suppression des dossiers vides..." -ForegroundColor Yellow

Get-ChildItem -Path "a:\Arsenal_bot" -Recurse -Directory | Where-Object {
    (Get-ChildItem $_.FullName -Recurse -File).Count -eq 0
} | ForEach-Object {
    Write-Host "üìÅ Dossier vide supprim√©: $($_.Name)" -ForegroundColor Gray
    Remove-Item $_.FullName -Force -Recurse
}

# ================================================================
# CR√âATION DOSSIER README
# ================================================================
Write-Host "`nüìö Cr√©ation du dossier README..." -ForegroundColor Green

$ReadmeDir = "a:\Arsenal_bot\README_DOCS"
if (-not (Test-Path $ReadmeDir)) {
    New-Item -ItemType Directory -Path $ReadmeDir -Force
    Write-Host "‚úÖ Dossier README_DOCS cr√©√©" -ForegroundColor Green
}

# D√©placer tous les README* vers le dossier
Get-ChildItem -Path "a:\Arsenal_bot" -Recurse -File | Where-Object { 
    $_.Name -match "^README" -or $_.Name -match "\.md$"
} | ForEach-Object {
    $dest = Join-Path $ReadmeDir $_.Name
    if ($_.FullName -ne $dest) {
        Move-Item $_.FullName $dest -Force
        Write-Host "üìù README d√©plac√©: $($_.Name)" -ForegroundColor Green
    }
}

# ================================================================
# RAPPORT FINAL
# ================================================================
Write-Host "`n================================================================" -ForegroundColor Yellow
Write-Host "üéâ NETTOYAGE TERMIN√â!" -ForegroundColor Green
Write-Host "================================================================" -ForegroundColor Yellow
Write-Host "üìä Statistiques:" -ForegroundColor Cyan
Write-Host "   ‚îî‚îÄ‚îÄ Fichiers supprim√©s: $FilesDeleted" -ForegroundColor White
Write-Host "   ‚îî‚îÄ‚îÄ Espace lib√©r√©: $([math]::Round($TotalSize / 1MB, 2)) MB" -ForegroundColor White
Write-Host "`n‚úÖ FICHIERS CONSERV√âS (ORIGINAUX):" -ForegroundColor Green
Write-Host "   ‚îî‚îÄ‚îÄ advanced_server.py (PRINCIPAL)" -ForegroundColor White
Write-Host "   ‚îî‚îÄ‚îÄ app_corrupted.py (R√âF√âRENCE)" -ForegroundColor White
Write-Host "`nüì¶ FICHIERS SAUVEGARD√âS:" -ForegroundColor Blue
Write-Host "   ‚îî‚îÄ‚îÄ Tous les backups dans BACKUP_FILES/" -ForegroundColor White
Write-Host "   ‚îî‚îÄ‚îÄ Tous les README dans README_DOCS/" -ForegroundColor White

Write-Host "`nüöÄ Arsenal est maintenant PROPRE et pr√™t!" -ForegroundColor Cyan

# Pause pour voir le r√©sultat
Read-Host "`nAppuyez sur Entr√©e pour continuer..."
