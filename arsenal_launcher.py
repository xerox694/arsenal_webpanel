"""
üöÄ Arsenal Launcher Ultra Robuste
Lance le webpanel ET le bot Discord de mani√®re fiable
"""

import os
import sys
import subprocess
import time
import signal
import threading
import json
from datetime import datetime

class ArsenalLauncher:
    def __init__(self):
        self.webpanel_process = None
        self.bot_process = None
        self.running = True
        
    def log(self, message):
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {message}")
        
    def start_webpanel(self):
        """D√©marrer le webpanel Flask"""
        try:
            self.log("üåê D√©marrage WebPanel...")
            
            self.webpanel_process = subprocess.Popen(
                [sys.executable, 'advanced_server.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            self.log(f"‚úÖ WebPanel d√©marr√©: PID {self.webpanel_process.pid}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå Erreur WebPanel: {e}")
            return False
    
    def start_bot(self):
        """D√©marrer le bot Discord"""
        try:
            self.log("ü§ñ D√©marrage Bot Discord...")
            
            # V√©rifier le token
            discord_token = os.environ.get('DISCORD_TOKEN')
            if not discord_token:
                self.log("‚ùå DISCORD_TOKEN manquant")
                return False
                
            # V√©rifier main.py
            if not os.path.exists('main.py'):
                self.log("‚ùå main.py non trouv√©")
                return False
            
            # Cr√©er environnement
            bot_env = os.environ.copy()
            
            self.bot_process = subprocess.Popen(
                [sys.executable, 'main.py'],
                env=bot_env,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                text=True,
                bufsize=1,
                universal_newlines=True
            )
            
            self.log(f"‚úÖ Bot d√©marr√©: PID {self.bot_process.pid}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå Erreur Bot: {e}")
            return False
    
    def monitor_processes(self):
        """Monitorer les processus"""
        while self.running:
            try:
                # V√©rifier webpanel
                if self.webpanel_process and self.webpanel_process.poll() is not None:
                    self.log("‚ùå WebPanel arr√™t√©, red√©marrage...")
                    self.start_webpanel()
                
                # V√©rifier bot
                if self.bot_process and self.bot_process.poll() is not None:
                    self.log("‚ùå Bot arr√™t√©, red√©marrage...")
                    self.start_bot()
                
                # Cr√©er fichier de statut
                self.update_status()
                
                time.sleep(30)  # V√©rifier toutes les 30s
                
            except Exception as e:
                self.log(f"‚ùå Erreur monitoring: {e}")
                time.sleep(10)
    
    def update_status(self):
        """Mettre √† jour le fichier de statut"""
        try:
            status = {
                "webpanel": {
                    "running": self.webpanel_process and self.webpanel_process.poll() is None,
                    "pid": self.webpanel_process.pid if self.webpanel_process else None
                },
                "bot": {
                    "running": self.bot_process and self.bot_process.poll() is None,
                    "pid": self.bot_process.pid if self.bot_process else None
                },
                "last_update": datetime.now().isoformat()
            }
            
            with open('launcher_status.json', 'w') as f:
                json.dump(status, f, indent=2)
                
        except Exception as e:
            self.log(f"‚ùå Erreur update status: {e}")
    
    def cleanup(self):
        """Nettoyer les processus"""
        self.log("üõë Arr√™t des processus...")
        self.running = False
        
        if self.webpanel_process:
            try:
                self.webpanel_process.terminate()
                self.webpanel_process.wait(timeout=5)
            except:
                self.webpanel_process.kill()
        
        if self.bot_process:
            try:
                self.bot_process.terminate()
                self.bot_process.wait(timeout=5)
            except:
                self.bot_process.kill()
    
    def run(self):
        """Lancer Arsenal complet"""
        try:
            self.log("üöÄ Arsenal Launcher d√©marr√©")
            
            # D√©marrer les services
            webpanel_ok = self.start_webpanel()
            time.sleep(2)  # Laisser le webpanel s'initialiser
            
            bot_ok = self.start_bot()
            
            if not webpanel_ok:
                self.log("‚ùå WebPanel n'a pas d√©marr√©")
                return False
            
            self.log(f"üìä Services: WebPanel={'‚úÖ' if webpanel_ok else '‚ùå'} Bot={'‚úÖ' if bot_ok else '‚ùå'}")
            
            # D√©marrer le monitoring
            monitor_thread = threading.Thread(target=self.monitor_processes, daemon=True)
            monitor_thread.start()
            
            # Attendre ind√©finiment (pour Render)
            while self.running:
                time.sleep(1)
            
        except KeyboardInterrupt:
            self.log("üëã Arr√™t demand√©")
        except Exception as e:
            self.log(f"‚ùå Erreur critique: {e}")
        finally:
            self.cleanup()

if __name__ == "__main__":
    launcher = ArsenalLauncher()
    
    # G√©rer les signaux d'arr√™t
    def signal_handler(signum, frame):
        launcher.cleanup()
        sys.exit(0)
    
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    launcher.run()
