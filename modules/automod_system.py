#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ°Ô∏è ARSENAL V4 - SYST√àME D'AUTOMOD ULTRA-AVANC√â
D√©tection spam, filtres, auto-sanctions, configuration compl√®te

üîÑ HOT-RELOAD: Version 1.0 - Syst√®me rechargeable √† chaud
‚ö° Test du syst√®me: Modifiez ce commentaire et utilisez /reload module automod_system
"""

import discord
from discord.ext import commands
from discord import app_commands
import json
import asyncio
import time
import re
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from core.logger import log
from manager.config_manager import config_data, save_config, load_config

class AutoModSystem:
    def __init__(self, bot):
        self.bot = bot
        self.config_path = "data/automod_config.json"
        self.user_message_history = {}  # Historique des messages pour d√©tection spam
        self.user_warnings = {}  # Syst√®me d'avertissements
        self.raid_tracker = {}  # Suivi des raids par serveur
        self.competing_bots = {}  # Bots concurrents d√©tect√©s par serveur
        self.load_config()
        
    def load_config(self):
        """Charge la configuration automod"""
        if os.path.exists(self.config_path):
            try:
                with open(self.config_path, "r", encoding="utf-8") as f:
                    self.config = json.load(f)
                log.info("üõ°Ô∏è Configuration automod charg√©e")
            except Exception as e:
                log.error(f"‚ùå Erreur chargement automod config: {e}")
                self.config = self.get_default_config()
        else:
            self.config = self.get_default_config()
            self.save_config()
    
    def save_config(self):
        """Sauvegarde la configuration"""
        try:
            os.makedirs("data", exist_ok=True)
            with open(self.config_path, "w", encoding="utf-8") as f:
                json.dump(self.config, f, indent=4, ensure_ascii=False)
            log.info("üíæ Configuration automod sauvegard√©e")
        except Exception as e:
            log.error(f"‚ùå Erreur sauvegarde automod: {e}")
    
    async def detect_competing_bots(self, guild: discord.Guild):
        """D√©tecte les bots concurrents d'automod/mod√©ration"""
        competing_bots = []
        
        # Liste des bots d'automod/mod√©ration connus
        known_automod_bots = {
            "Carl-bot": [235148962103951360],
            "Dyno": [155149108183695360],
            "MEE6": [159985870458322944],
            "Ticket Tool": [557628352828014614],
            "Dank Memer": [270904126974590976],
            "YAGPDB": [204255221017214977],
            "Groovy": [234395307759108106],
            "Rythm": [235088799074484224],
            "Mudae": [432610292342587392],
            "Pancake": [239631525350604801],
            "GiveawayBot": [396464677032329216],
            "Pokecord": [365975655608745985],
            "Nadeko": [116275390695079945],
            "UnbelievaBoat": [292953664492929025],
            "ServerStats": [458276816071950337],
            "Statbot": [297045071457681409],
            "Discord Tickets": [514429412392984597]
        }
    
    async def detect_welcome_bots(self, guild: discord.Guild):
        """D√©tecte sp√©cifiquement les bots de bienvenue pour √©viter les doublons"""
        welcome_bots = []
        
        # Bots de bienvenue populaires
        welcome_bot_list = {
            "Carl-bot": [235148962103951360],
            "Dyno": [155149108183695360], 
            "MEE6": [159985870458322944],
            "YAGPDB": [204255221017214977],
            "UnbelievaBoat": [292953664492929025],
            "Pancake": [239631525350604801],
            "GiveawayBot": [396464677032329016],
            "Welcome Bot": [330416853971107840],
            "Welcomer": [330416853971107840],
            "Ticket Tool": [557628352828014614]
        }
        
        for member in guild.members:
            if member.bot:
                for bot_name, bot_ids in welcome_bot_list.items():
                    if member.id in bot_ids:
                        # V√©rifier si le bot a des permissions pour envoyer des messages
                        permissions = member.guild_permissions
                        can_welcome = any([
                            permissions.send_messages,
                            permissions.manage_messages,
                            permissions.embed_links
                        ])
                        
                        if can_welcome:
                            welcome_bots.append({
                                "name": bot_name,
                                "mention": member.mention,
                                "id": member.id,
                                "disable_commands": self.get_welcome_disable_commands(bot_name)
                            })
        
        return welcome_bots
    
    def get_welcome_disable_commands(self, bot_name: str):
        """Retourne les commandes pour d√©sactiver les messages de bienvenue"""
        commands_map = {
            "Carl-bot": [
                "/automod welcomer disable",
                "/welcomer disable"
            ],
            "Dyno": [
                "?modules disable Autoresponder",
                "Dashboard: dynobot.net > Modules > Autoresponder"
            ],
            "MEE6": [
                "Dashboard: mee6.xyz > Welcome > Disable",
                "/welcome disable"
            ],
            "YAGPDB": [
                "Dashboard: yagpdb.xyz > Autorole & Welcome messages > Disable"
            ],
            "UnbelievaBoat": [
                "/settings welcome disable"
            ],
            "Pancake": [
                "/config welcome disable"
            ],
            "Welcome Bot": [
                "/settings toggle welcome off"
            ],
            "Ticket Tool": [
                "/config welcome disable"
            ]
        }
        return commands_map.get(bot_name, ["V√©rifiez les param√®tres du bot"])
        
        # V√©rifier chaque bot sur le serveur
        for member in guild.members:
            if member.bot:
                for bot_name, bot_ids in known_automod_bots.items():
                    if member.id in bot_ids:
                        # V√©rifier les permissions du bot concurrent
                        permissions = member.guild_permissions
                        has_mod_perms = any([
                            permissions.manage_messages,
                            permissions.kick_members,
                            permissions.ban_members,
                            permissions.manage_roles,
                            permissions.moderate_members
                        ])
                        
                        if has_mod_perms:
                            competing_bots.append({
                                "name": bot_name,
                                "mention": member.mention,
                                "id": member.id,
                                "permissions": {
                                    "manage_messages": permissions.manage_messages,
                                    "kick_members": permissions.kick_members,
                                    "ban_members": permissions.ban_members,
                                    "manage_roles": permissions.manage_roles,
                                    "moderate_members": permissions.moderate_members
                                }
                            })
        
        return competing_bots

    def get_default_config(self):
        """Configuration par d√©faut"""
        return {
            "enabled": True,
            "competing_bots_detected": [],  # Bots concurrents d√©tect√©s
            "auto_disable_competitors": False,  # D√©sactivation auto (d√©faut: non)
            "spam_detection": {
                "enabled": True,
                "max_messages": 5,  # Messages max en X secondes
                "time_window": 5,   # Fen√™tre de temps en secondes
                "max_duplicates": 3,  # Messages identiques max
                "action": "mute",   # warn, mute, kick, ban
                "duration": 300     # Dur√©e mute en secondes
            },
            "word_filter": {
                "enabled": True,
                "use_advanced_filter": True,  # Nouveau syst√®me avanc√© par niveaux
                "level_1_action": "warn",      # Grossi√®ret√©s l√©g√®res
                "level_2_action": "timeout",   # Insultes offensantes  
                "level_2_duration": 300,       # 5 minutes
                "level_3_action": "timeout",   # Vulgarit√©s sexuelles
                "level_3_duration": 1800,      # 30 minutes
                "level_4_action": "timeout",   # Haine raciale/Extr√™me
                "level_4_duration": 7200,      # 2 heures
                "auto_delete": True,
                "words": [
                    "fuck", "shit", "bitch", "ass", "damn", 
                    "putain", "merde", "connard", "salope", "con"
                ],
                "action": "warn",   # Action pour mots basiques (legacy)
                # Base de donn√©es avanc√©e par niveaux
                "level_1_words": [
                    "abruti","abrutis","abrutie","abruties","abrut1","abrvt1",
                    "andouille","andouilles","and0uille","and0uil1e",
                    "banane","bananes","b4n4ne","b@nane",
                    "boulet","boulets","b0ulet","b0ulets",
                    "b√™te","betes","b3te","b3t3",
                    "blaireau","blaireaux","bl4ireau","bl@ireau",
                    "casse-pieds","casse pieds","c4sse pieds",
                    "cloche","cloches","cl0che","cl0ches",
                    "clown","clowns","cl0wn","cl0wns",
                    "cornichon","cornichons","c0rnichon","c0rn1chon",
                    "cr√©tin","cretins","cr3tin","cr3t1n",
                    "cruche","cruches","crvche","crvches",
                    "debile","debiles","d√©bile","d√©biles","d3bile","d3b1le",
                    "gogole","gogoles","g0g0le","g0g0l3",
                    "gourdasse","gourdasses","g0urdasse","g0vrdasse",
                    "gourde","gourdes","g0urde","g0vrd3",
                    "idiot","idiots","1diot","1diots",
                    "imb√©cile","imb√©ciles","imb3cile","imb3c1le",
                    "naze","nazes","n4ze","n4z3",
                    "nul","nuls","nu1","nu1s",
                    "pignouf","pignoufs","p1gn0uf","p1gn0u∆í",
                    "plouc","ploucs","pl0uc","pl0vcs",
                    "tocard","tocards","t0card","t0c4rd",
                    "triple buse","triple buses","tr1ple buse",
                    "trouduc","trou du cul","tr0uduc","tr0u du cul",
                    "zigoto","zigotos","z1goto","z1g0t0",
                    "zouave","zouaves","z0uave","z0uav3",
                    "moron","dummy","stupid","loser","fool","nitwit",
                    "numbskull","dope","twit","donkey","silly","jerk"
                ],
                "level_2_words": [
                    "abruti fini","andouille finie",
                    "baltringue","baltringues","b4ltr1ngue","b@ltr1ngue",
                    "batard","b√¢tard","batards","b√¢tards","b4tard","b4t4rd","b@tard","b@t4rd",
                    "bouffon","bouffons","b0uffon","b0uff0n",
                    "bouffonne","bouffonnes","b0uffonne","b0uff0nn3",
                    "connard","connards","c0nnard","c0nn4rd","konnard","konar",
                    "connasse","connasses","c0nnasse","c0nn@ss3","konnasse","konasse",
                    "cr√©tin fini","cr√©tine finie","cr3tin fini",
                    "cul√©","cul√©s","cvl√©","cv1√©",
                    "d√©bile profond","d3bile profond",
                    "encul√©","encul√©s","encule","encules","encvl√©","3ncul√©","3ncul3","ncul√©",
                    "enflure","enflures","3nflure","3nflvres",
                    "face de rat","face de con","t√™te de con","t√™te de noeud",
                    "fils de chien","fils de pute","f1ls de ch13n","f1ls de put3",
                    "grognasse","grognasses","gr0gnasse","gr0gn@ss3",
                    "guignol","guignols","gu1gnol","gu1gn0l",
                    "idiot de service","imb√©cile fini",
                    "mange-merde","mange m*rde","mange m3rde",
                    "merdeux","merdeuse","m3rdeux","m3rdeuse",
                    "pauv' con","pauvre con","pauvre conne",
                    "p√©d√©","pd","p√©d√©s","p√©dale","pdale","p3d√©","p3d3","p3dale",
                    "pleutre","pleutres","pl3utre",
                    "pourri","pourris","p0urri","p0urr1",
                    "rat√©","rat√©s","r4t√©","r4t3",
                    "sale con","sale conne","s4le con","s4le c0nne",
                    "tapette","tapettes","t4pette","t4p3tte",
                    "toxico","toxicos","t0xico","t0x1co",
                    "trou de balle","troudeballe","troudeb4lle",
                    "vaurien","vauriens","v@urien","v@vr1en",
                    "wanker","tosser","bollocks","git","twat","prick","arse","bastard"
                ],
                "level_3_words": [
                    "baiseur","baiseurs","b4iseur","b@iseur",
                    "baiseuse","baiseuses","b4iseuse","b@iseuse",
                    "baiser ta m√®re","bais√© ta m√®re","b4iser ta m3re","b@is√© ta m3r3",
                    "baisable","baisables","b4isable","b@isable",
                    "branleur","branleuse","branleurs","branleuses","br4nleur","br@nleur",
                    "branlette","branlettes","br4nlette","br@nlette",
                    "chaudasse","chaudasses","ch0udasse","ch@udass3",
                    "chienne","chiennes","ch1enne","ch1enn3",
                    "couilles","couille","couillons","c0uille","c0u1lle","c0u1ll0ns",
                    "cul","culs","cv1","cv1s","kvl","kul",
                    "fellation","foutre","f0utre","f0uttr3",
                    "gouine","gouines","g0uine","g0uin3",
                    "jouir","jouis","j0uir","j0u1r",
                    "merdier","merdiers","m3rdier","m3rd1ers",
                    "niquer","niqu√©","niqu√©s","n!quer","n1quer","n!k√©","n1k√©",
                    "nique ta m√®re","nique ta race","n1que ta m3re","n1que ta r4ce",
                    "p√©ter le cul","p√®te le cul","p3ter le cvl","p3te le cvl",
                    "pipe","pipes","p!pe","p1pe",
                    "pisse","pisses","p!sse","p1sse",
                    "pucelle","pucelles","pvcelle","pvcell3",
                    "putain","putains","put1","put1n","put@in","pvtain",
                    "pute","putes","pvt3","pvtte","put3","put‚Ç¨",
                    "queutard","queue","queues","qu3ue","qu3u3",
                    "salope","salopes","s4lope","s4l0p3",
                    "sodomie","sodomiser","s0domie","s0dom1ser",
                    "suce","sucer","suceur","suceuse","sucettemoi",
                    "trou du cul","trouduc","tr0u du cvl","tr0uduc",
                    "zob","zboub","zb0ub","zb0bb",
                    "cocksucker","motherfucker","slut","whore","cum","pussy","dick","asshole","faggot","dyke","bitch","cock","jerkoff"
                ],
                "level_4_words": [
                    "sale arabe","sale bougnoule","bougnoul","b0ugnoule","b0ugn0ul",
                    "sale noir","sale n√®gre","n√®gre","n√®gres","n3gre","n3gr3","n1gre",
                    "sale blanc","sale caucasien","sale gaulois",
                    "sale juif","youpin","youpine","y0upin","y0up1n",
                    "sale musulman","sale islamiste","sale catho","sale chr√©tien",
                    "sale p√©d√©","sale tarlouze","sale fiotte",
                    "sale gouine","sale lesbienne",
                    "chinois de merde","chinetoque","chinetoques","chinetoqu3",
                    "raton","ratons","r4ton","r4t0n",
                    "nazi","nazis","n4zi","n4z1",
                    "hitler","hitl3r","h!tler",
                    "terroriste","terroristes","t3rroriste","t3rror1st3",
                    "sale porc","sale chienne d'arabe","sale chien de juif",
                    "encul√© de ta race","encul√© de ta m√®re la race",
                    "nique les blancs","nique les noirs","nique les arabes","nique les juifs",
                    "cr√®ve sale","cr√®ve ta race","cr√®ve arabe","cr√®ve bougnoule",
                    "sale b√¢tard de blanc","sale b√¢tard de noir","sale b√¢tard d'arabe",
                    "sale fils de pute raciste",
                    "dirty nigger","n1gger","n!gger","nigg3r",
                    "sand nigger","monkey","ape","chink","gook","spic","kike",
                    "fucking jew","fucking muslim","fucking black","fucking white",
                    "white trash","black trash","islamic pig","christian pig",
                    "gas the jews","burn the muslims","kill all blacks","kill all whites",
                    "exterminate jews","exterminate muslims","exterminate blacks",
                    "hang the niggers","lynch the blacks","burn the gays","burn the faggots",
                    "death to jews","death to muslims","death to christians"
                ]
            },
            "caps_filter": {
                "enabled": True,
                "max_caps_percentage": 70,  # % majuscules max
                "min_message_length": 10,   # Longueur min pour v√©rification
                "action": "warn"
            },
            "mention_spam": {
                "enabled": True,
                "max_mentions": 5,  # Mentions max par message
                "action": "mute",
                "duration": 600
            },
            "link_filter": {
                "enabled": False,
                "whitelist": ["discord.gg", "youtube.com", "github.com"],
                "action": "delete"
            },
            "raid_protection": {
                "enabled": True,
                "max_joins": 10,    # Nouveaux membres max en X secondes
                "time_window": 30,  # Fen√™tre de temps
                "action": "lockdown"  # lockdown, kick_new_members
            },
            "auto_sanctions": {
                "enabled": True,
                "warn_threshold": 3,    # Warnings avant action
                "mute_duration": 600,   # 10 minutes
                "ban_duration": 86400   # 24h (0 = permanent)
            },
            "exempt_roles": [],  # R√¥les exempts
            "exempt_channels": [],  # Salons exempts
            "log_channel": None,  # Salon de logs
            "servers": {}  # Config par serveur
        }
    
    def get_server_config(self, guild_id: int):
        """R√©cup√®re la config pour un serveur sp√©cifique"""
        guild_id = str(guild_id)
        if guild_id not in self.config["servers"]:
            self.config["servers"][guild_id] = self.get_default_config()
            self.save_config()
        return self.config["servers"][guild_id]
    
    def update_server_config(self, guild_id: int, new_config: dict):
        """Met √† jour la config d'un serveur"""
        guild_id = str(guild_id)
        self.config["servers"][guild_id] = new_config
        self.save_config()
    
    async def is_exempt(self, message: discord.Message) -> bool:
        """V√©rifie si l'utilisateur/salon est exempt"""
        config = self.get_server_config(message.guild.id)
        
        # V√©rification des r√¥les exempts
        if message.author.guild_permissions.administrator:
            return True
            
        user_role_ids = [role.id for role in message.author.roles]
        if any(role_id in config["exempt_roles"] for role_id in user_role_ids):
            return True
            
        # V√©rification des salons exempts
        if message.channel.id in config["exempt_channels"]:
            return True
            
        return False
    
    async def log_action(self, guild: discord.Guild, action: str, user: discord.Member, reason: str, details: str = ""):
        """Log les actions d'automod"""
        config = self.get_server_config(guild.id)
        log_channel_id = config.get("log_channel")
        
        if log_channel_id:
            log_channel = guild.get_channel(log_channel_id)
            if log_channel:
                embed = discord.Embed(
                    title="üõ°Ô∏è Action AutoMod",
                    color=discord.Color.orange(),
                    timestamp=datetime.utcnow()
                )
                embed.add_field(name="üë§ Utilisateur", value=f"{user.mention} ({user.id})", inline=True)
                embed.add_field(name="‚ö° Action", value=action, inline=True)
                embed.add_field(name="üìù Raison", value=reason, inline=True)
                if details:
                    embed.add_field(name="üìã D√©tails", value=details, inline=False)
                embed.set_footer(text=f"Arsenal AutoMod ‚Ä¢ {guild.name}")
                
                try:
                    await log_channel.send(embed=embed)
                except Exception as e:
                    log.error(f"‚ùå Erreur envoi log automod: {e}")
    
    async def apply_sanction(self, message: discord.Message, action: str, reason: str, duration: int = 0):
        """Applique une sanction"""
        user = message.author
        guild = message.guild
        
        try:
            if action == "warn":
                # Syst√®me d'avertissement
                user_id = str(user.id)
                guild_id = str(guild.id)
                
                if guild_id not in self.user_warnings:
                    self.user_warnings[guild_id] = {}
                if user_id not in self.user_warnings[guild_id]:
                    self.user_warnings[guild_id][user_id] = 0
                
                self.user_warnings[guild_id][user_id] += 1
                warnings = self.user_warnings[guild_id][user_id]
                
                await message.channel.send(f"‚ö†Ô∏è {user.mention}, avertissement ({warnings}/3) : {reason}")
                await self.log_action(guild, f"Avertissement ({warnings}/3)", user, reason)
                
                # V√©rifier si seuil d'avertissements atteint
                config = self.get_server_config(guild.id)
                if warnings >= config["auto_sanctions"]["warn_threshold"]:
                    await self.apply_sanction(message, "mute", f"Seuil d'avertissements atteint ({warnings})", 
                                            config["auto_sanctions"]["mute_duration"])
            
            elif action == "delete":
                await message.delete()
                await self.log_action(guild, "Message supprim√©", user, reason, f"Contenu: {message.content[:100]}...")
            
            elif action == "mute":
                # Mute temporaire
                timeout_until = datetime.utcnow() + timedelta(seconds=duration)
                await user.timeout(timeout_until, reason=f"AutoMod: {reason}")
                
                time_str = f"{duration//60}min {duration%60}s" if duration >= 60 else f"{duration}s"
                await message.channel.send(f"üîá {user.mention} a √©t√© rendu muet pour {time_str}. Raison: {reason}")
                await self.log_action(guild, f"Mute ({time_str})", user, reason)
            
            elif action == "kick":
                await user.kick(reason=f"AutoMod: {reason}")
                await message.channel.send(f"üë¢ {user.mention} a √©t√© expuls√©. Raison: {reason}")
                await self.log_action(guild, "Kick", user, reason)
            
            elif action == "ban":
                ban_duration = timedelta(seconds=duration) if duration > 0 else None
                await user.ban(reason=f"AutoMod: {reason}", delete_message_days=1)
                
                duration_str = f" ({duration//3600}h)" if duration > 0 else " (permanent)"
                await message.channel.send(f"üî® {user.mention} a √©t√© banni{duration_str}. Raison: {reason}")
                await self.log_action(guild, f"Ban{duration_str}", user, reason)
        
        except Exception as e:
            log.error(f"‚ùå Erreur application sanction {action}: {e}")
    
    async def check_spam(self, message: discord.Message) -> bool:
        """D√©tecte le spam/flood"""
        config = self.get_server_config(message.guild.id)
        if not config["spam_detection"]["enabled"]:
            return False
        
        user_id = message.author.id
        current_time = time.time()
        
        # Initialiser l'historique utilisateur
        if user_id not in self.user_message_history:
            self.user_message_history[user_id] = []
        
        # Ajouter le message actuel
        self.user_message_history[user_id].append({
            "time": current_time,
            "content": message.content,
            "channel": message.channel.id
        })
        
        # Nettoyer les anciens messages
        time_window = config["spam_detection"]["time_window"]
        self.user_message_history[user_id] = [
            msg for msg in self.user_message_history[user_id]
            if current_time - msg["time"] <= time_window
        ]
        
        recent_messages = self.user_message_history[user_id]
        
        # V√©rifier le nombre de messages
        if len(recent_messages) > config["spam_detection"]["max_messages"]:
            await self.apply_sanction(
                message, 
                config["spam_detection"]["action"],
                f"Spam d√©tect√© ({len(recent_messages)} messages en {time_window}s)",
                config["spam_detection"]["duration"]
            )
            return True
        
        # V√©rifier les doublons
        content_count = {}
        for msg in recent_messages:
            content = msg["content"].lower().strip()
            content_count[content] = content_count.get(content, 0) + 1
        
        max_duplicates = config["spam_detection"]["max_duplicates"]
        for content, count in content_count.items():
            if count > max_duplicates and content:
                await self.apply_sanction(
                    message,
                    config["spam_detection"]["action"],
                    f"Messages identiques r√©p√©t√©s ({count} fois)",
                    config["spam_detection"]["duration"]
                )
                return True
        
        return False
    
    async def check_word_filter(self, message: discord.Message) -> bool:
        """Filtre les mots interdits avec syst√®me avanc√© par niveaux"""
        config = self.get_server_config(message.guild.id)
        if not config["word_filter"]["enabled"]:
            return False
        
        content = message.content.lower()
        
        # Nouveau syst√®me avanc√© par niveaux
        if config["word_filter"].get("use_advanced_filter", True):
            return await self.check_advanced_word_filter(message, config, content)
        
        # Ancien syst√®me basique (fallback)
        forbidden_words = config["word_filter"]["words"]
        
        for word in forbidden_words:
            if word.lower() in content:
                if config["word_filter"]["auto_delete"]:
                    await self.apply_sanction(message, "delete", f"Mot interdit d√©tect√©: {word}")
                
                await self.apply_sanction(
                    message,
                    config["word_filter"]["action"],
                    f"Utilisation de mot interdit: {word}"
                )
                return True
        
        return False
    
    async def check_advanced_word_filter(self, message: discord.Message, config: dict, content: str) -> bool:
        """Syst√®me de filtrage avanc√© par niveaux de gravit√©"""
        
        # Niveau 4 - Haine raciale/Extr√™me (priorit√© maximale)
        level_4_words = config["word_filter"].get("level_4_words", [])
        for word in level_4_words:
            if word.lower() in content:
                if config["word_filter"]["auto_delete"]:
                    await self.apply_sanction(message, "delete", f"Contenu haineux d√©tect√©")
                
                # Timeout 2 heures + log sp√©cial
                duration = config["word_filter"].get("level_4_duration", 7200)
                await self.apply_sanction(
                    message,
                    config["word_filter"]["level_4_action"],
                    f"üö® Contenu haineux/raciste d√©tect√© (Niveau 4)",
                    duration
                )
                
                # Log sp√©cial pour le niveau 4
                await self.log_hate_speech(message, word, "Niveau 4 - Haine raciale/Extr√™me")
                return True
        
        # Niveau 3 - Vulgarit√©s sexuelles
        level_3_words = config["word_filter"].get("level_3_words", [])
        for word in level_3_words:
            if word.lower() in content:
                if config["word_filter"]["auto_delete"]:
                    await self.apply_sanction(message, "delete", f"Contenu sexuel d√©tect√©")
                
                duration = config["word_filter"].get("level_3_duration", 1800)  # 30 min
                await self.apply_sanction(
                    message,
                    config["word_filter"]["level_3_action"],
                    f"‚ö†Ô∏è Vulgarit√© sexuelle d√©tect√©e (Niveau 3)",
                    duration
                )
                return True
        
        # Niveau 2 - Insultes offensantes
        level_2_words = config["word_filter"].get("level_2_words", [])
        for word in level_2_words:
            if word.lower() in content:
                if config["word_filter"]["auto_delete"]:
                    await self.apply_sanction(message, "delete", f"Insulte d√©tect√©e")
                
                duration = config["word_filter"].get("level_2_duration", 300)  # 5 min
                await self.apply_sanction(
                    message,
                    config["word_filter"]["level_2_action"],
                    f"üí¢ Insulte offensante d√©tect√©e (Niveau 2)",
                    duration
                )
                return True
        
        # Niveau 1 - Grossi√®ret√©s l√©g√®res
        level_1_words = config["word_filter"].get("level_1_words", [])
        for word in level_1_words:
            if word.lower() in content:
                if config["word_filter"]["auto_delete"]:
                    await self.apply_sanction(message, "delete", f"Grossi√®ret√© d√©tect√©e")
                
                await self.apply_sanction(
                    message,
                    config["word_filter"]["level_1_action"],
                    f"üò† Grossi√®ret√© d√©tect√©e (Niveau 1)"
                )
                return True
        
        return False
    
    async def log_hate_speech(self, message: discord.Message, word: str, level: str):
        """Log sp√©cial pour les contenus haineux (Niveau 4)"""
        config = self.get_server_config(message.guild.id)
        log_channel_id = config.get("log_channel")
        
        if log_channel_id:
            log_channel = message.guild.get_channel(log_channel_id)
            if log_channel:
                embed = discord.Embed(
                    title="üö® ALERTE - Contenu Haineux D√©tect√©",
                    description=f"**{level}**",
                    color=discord.Color.dark_red(),
                    timestamp=datetime.utcnow()
                )
                embed.add_field(name="üë§ Utilisateur", value=f"{message.author.mention} ({message.author.id})", inline=True)
                embed.add_field(name="üìç Salon", value=f"{message.channel.mention}", inline=True)
                embed.add_field(name="‚ö° Action", value="Timeout 2h + Suppression", inline=True)
                embed.add_field(name="üîç Mot d√©tect√©", value=f"||{word}||", inline=False)
                embed.add_field(name="üìù Message", value=f"||{message.content[:200]}...||", inline=False)
                embed.add_field(name="‚ö†Ô∏è Attention", value="Ce type de contenu peut n√©cessiter une action manuelle suppl√©mentaire", inline=False)
                embed.set_footer(text=f"Arsenal AutoMod ‚Ä¢ Surveillance Niveau 4")
                
                try:
                    await log_channel.send(embed=embed)
                    # Ping les mod√©rateurs pour les cas graves
                    await log_channel.send("üö® @here - Contenu haineux d√©tect√©, v√©rification manuelle recommand√©e")
                except Exception as e:
                    log.error(f"‚ùå Erreur envoi log hate speech: {e}")
        
        # Log √©galement dans les logs syst√®me
        log.warning(f"üö® HATE SPEECH d√©tect√© sur {message.guild.name} par {message.author} ({message.author.id}): {word}")
    
    async def apply_sanction(self, message: discord.Message, action: str, reason: str, duration: int = 0):
        """Applique une sanction avec support des timeouts avanc√©s"""
        user = message.author
        guild = message.guild
        
        try:
            if action == "warn":
                # Syst√®me d'avertissement
                user_id = str(user.id)
                guild_id = str(guild.id)
                
                if guild_id not in self.user_warnings:
                    self.user_warnings[guild_id] = {}
                if user_id not in self.user_warnings[guild_id]:
                    self.user_warnings[guild_id][user_id] = 0
                
                self.user_warnings[guild_id][user_id] += 1
                warnings = self.user_warnings[guild_id][user_id]
                
                await message.channel.send(f"‚ö†Ô∏è {user.mention}, avertissement ({warnings}/3) : {reason}")
                await self.log_action(guild, f"Avertissement ({warnings}/3)", user, reason)
                
                # V√©rifier si seuil d'avertissements atteint
                config = self.get_server_config(guild.id)
                if warnings >= config["auto_sanctions"]["warn_threshold"]:
                    await self.apply_sanction(message, "timeout", f"Seuil d'avertissements atteint ({warnings})", 
                                            config["auto_sanctions"]["mute_duration"])
            
            elif action == "delete":
                await message.delete()
                await self.log_action(guild, "Message supprim√©", user, reason, f"Contenu: {message.content[:100]}...")
            
            elif action in ["mute", "timeout"]:
                # Timeout temporaire (nouvelle API Discord)
                timeout_until = datetime.utcnow() + timedelta(seconds=duration)
                await user.timeout(timeout_until, reason=f"AutoMod: {reason}")
                
                # Formatage intelligent de la dur√©e
                if duration >= 3600:  # Plus d'1 heure
                    time_str = f"{duration//3600}h{(duration%3600)//60:02d}min"
                elif duration >= 60:  # Plus d'1 minute
                    time_str = f"{duration//60}min{duration%60:02d}s"
                else:
                    time_str = f"{duration}s"
                
                # Message adapt√© selon la gravit√©
                if duration >= 3600:  # Sanctions lourdes
                    await message.channel.send(f"üîá {user.mention} a √©t√© mis en timeout pour **{time_str}**.\nüìã Raison: {reason}")
                else:  # Sanctions l√©g√®res
                    await message.channel.send(f"üîá {user.mention} timeout {time_str} - {reason}")
                
                await self.log_action(guild, f"Timeout ({time_str})", user, reason)
            
            elif action == "kick":
                await user.kick(reason=f"AutoMod: {reason}")
                await message.channel.send(f"üë¢ {user.mention} a √©t√© expuls√©. Raison: {reason}")
                await self.log_action(guild, "Kick", user, reason)
            
            elif action == "ban":
                ban_duration = timedelta(seconds=duration) if duration > 0 else None
                await user.ban(reason=f"AutoMod: {reason}", delete_message_days=1)
                
                duration_str = f" ({duration//3600}h)" if duration > 0 else " (permanent)"
                await message.channel.send(f"üî® {user.mention} a √©t√© banni{duration_str}. Raison: {reason}")
                await self.log_action(guild, f"Ban{duration_str}", user, reason)
        
        except Exception as e:
            log.error(f"‚ùå Erreur application sanction {action}: {e}")
            # En cas d'erreur, essayer une sanction de fallback
            if action == "timeout" and duration > 0:
                try:
                    # Fallback vers un mute de r√¥le si timeout √©choue
                    await message.channel.send(f"‚ö†Ô∏è Erreur timeout pour {user.mention}, veuillez appliquer une sanction manuelle")
                except:
                    pass
    
    async def check_caps_filter(self, message: discord.Message) -> bool:
        """Filtre les messages en majuscules excessives"""
        config = self.get_server_config(message.guild.id)
        if not config["caps_filter"]["enabled"]:
            return False
        
        content = message.content
        if len(content) < config["caps_filter"]["min_message_length"]:
            return False
        
        caps_count = sum(1 for c in content if c.isupper())
        caps_percentage = (caps_count / len(content)) * 100
        
        if caps_percentage > config["caps_filter"]["max_caps_percentage"]:
            await self.apply_sanction(
                message,
                config["caps_filter"]["action"],
                f"Trop de majuscules ({caps_percentage:.1f}%)"
            )
            return True
        
        return False
    
    async def check_mention_spam(self, message: discord.Message) -> bool:
        """D√©tecte le spam de mentions"""
        config = self.get_server_config(message.guild.id)
        if not config["mention_spam"]["enabled"]:
            return False
        
        mention_count = len(message.mentions) + len(message.role_mentions)
        
        if mention_count > config["mention_spam"]["max_mentions"]:
            await self.apply_sanction(
                message,
                config["mention_spam"]["action"],
                f"Spam de mentions ({mention_count} mentions)",
                config["mention_spam"]["duration"]
            )
            return True
        
        return False
    
    async def check_link_filter(self, message: discord.Message) -> bool:
        """Filtre les liens non autoris√©s"""
        config = self.get_server_config(message.guild.id)
        if not config["link_filter"]["enabled"]:
            return False
        
        # Regex pour d√©tecter les URLs
        url_pattern = re.compile(
            r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
        )
        
        urls = url_pattern.findall(message.content)
        whitelist = config["link_filter"]["whitelist"]
        
        for url in urls:
            allowed = any(domain in url for domain in whitelist)
            if not allowed:
                await self.apply_sanction(
                    message,
                    config["link_filter"]["action"],
                    f"Lien non autoris√©: {url[:50]}..."
                )
                return True
        
        return False
    
    async def process_message(self, message: discord.Message):
        """Traite un message avec tous les filtres"""
        if message.author.bot or not message.guild:
            return
        
        config = self.get_server_config(message.guild.id)
        if not config["enabled"]:
            return
        
        if await self.is_exempt(message):
            return
        
        # Appliquer tous les filtres
        await self.check_spam(message)
        await self.check_word_filter(message)
        await self.check_caps_filter(message)
        await self.check_mention_spam(message)
        await self.check_link_filter(message)

# Commandes slash pour l'automod
automod_group = app_commands.Group(name="automod", description="üõ°Ô∏è Configuration du syst√®me d'auto-mod√©ration")

@automod_group.command(name="status", description="Affiche le statut de l'automod")
async def automod_status(interaction: discord.Interaction):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    config = automod.get_server_config(interaction.guild.id)
    
    status = "üü¢ Activ√©" if config["enabled"] else "üî¥ D√©sactiv√©"
    
    embed = discord.Embed(
        title="üõ°Ô∏è Statut AutoMod Arsenal",
        description=f"**Statut global:** {status}",
        color=discord.Color.green() if config["enabled"] else discord.Color.red()
    )
    
    # Modules
    modules_status = []
    modules = [
        ("spam_detection", "üö´ Anti-Spam"),
        ("word_filter", "ü§¨ Filtre de mots"),
        ("caps_filter", "üî† Filtre majuscules"),
        ("mention_spam", "üì¢ Anti-mention spam"),
        ("link_filter", "üîó Filtre de liens"),
        ("raid_protection", "üõ°Ô∏è Protection raid")
    ]
    
    for module_key, module_name in modules:
        status_icon = "üü¢" if config[module_key]["enabled"] else "üî¥"
        modules_status.append(f"{status_icon} {module_name}")
    
    embed.add_field(
        name="üìã Modules",
        value="\n".join(modules_status),
        inline=True
    )
    
    # Statistiques
    guild_warnings = automod.user_warnings.get(str(interaction.guild.id), {})
    total_warnings = sum(guild_warnings.values())
    
    embed.add_field(
        name="üìä Statistiques",
        value=f"**Avertissements:** {total_warnings}\n**Utilisateurs suivis:** {len(guild_warnings)}",
        inline=True
    )
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@automod_group.command(name="toggle", description="Active/d√©sactive l'automod")
@app_commands.checks.has_permissions(administrator=True)
async def automod_toggle(interaction: discord.Interaction):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    config = automod.get_server_config(interaction.guild.id)
    config["enabled"] = not config["enabled"]
    automod.update_server_config(interaction.guild.id, config)
    
    status = "activ√©" if config["enabled"] else "d√©sactiv√©"
    emoji = "üü¢" if config["enabled"] else "üî¥"
    
    await interaction.response.send_message(f"{emoji} AutoMod {status} sur ce serveur", ephemeral=True)

@automod_group.command(name="config", description="Configure les param√®tres d'automod")
@app_commands.describe(
    module="Module √† configurer",
    setting="Param√®tre √† modifier",
    value="Nouvelle valeur"
)
@app_commands.choices(module=[
    app_commands.Choice(name="Anti-Spam", value="spam_detection"),
    app_commands.Choice(name="Filtre de mots", value="word_filter"),
    app_commands.Choice(name="Filtre majuscules", value="caps_filter"),
    app_commands.Choice(name="Anti-mention spam", value="mention_spam"),
    app_commands.Choice(name="Filtre liens", value="link_filter")
])
@app_commands.checks.has_permissions(administrator=True)
async def automod_config(interaction: discord.Interaction, module: str, setting: str, value: str):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    config = automod.get_server_config(interaction.guild.id)
    
    if module not in config:
        await interaction.response.send_message(f"‚ùå Module '{module}' introuvable", ephemeral=True)
        return
    
    try:
        # Conversion de la valeur selon le type
        if value.lower() in ['true', 'false']:
            value = value.lower() == 'true'
        elif value.isdigit():
            value = int(value)
        elif value.replace('.', '').isdigit():
            value = float(value)
        
        config[module][setting] = value
        automod.update_server_config(interaction.guild.id, config)
        
        await interaction.response.send_message(
            f"‚úÖ {module}.{setting} = {value}", 
            ephemeral=True
        )
        
    except Exception as e:
        await interaction.response.send_message(f"‚ùå Erreur: {e}", ephemeral=True)

@automod_group.command(name="add_word", description="Ajoute un mot au filtre")
@app_commands.describe(word="Mot √† ajouter au filtre")
@app_commands.checks.has_permissions(administrator=True)
async def add_word(interaction: discord.Interaction, word: str):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    config = automod.get_server_config(interaction.guild.id)
    
    if word.lower() not in [w.lower() for w in config["word_filter"]["words"]]:
        config["word_filter"]["words"].append(word.lower())
        automod.update_server_config(interaction.guild.id, config)
        await interaction.response.send_message(f"‚úÖ Mot '{word}' ajout√© au filtre", ephemeral=True)
    else:
        await interaction.response.send_message(f"‚ùå Mot '{word}' d√©j√† dans le filtre", ephemeral=True)

@automod_group.command(name="remove_word", description="Retire un mot du filtre")
@app_commands.describe(word="Mot √† retirer du filtre")
@app_commands.checks.has_permissions(administrator=True)
async def remove_word(interaction: discord.Interaction, word: str):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    config = automod.get_server_config(interaction.guild.id)
    
    words_lower = [w.lower() for w in config["word_filter"]["words"]]
    if word.lower() in words_lower:
        # Trouver et supprimer le mot (en gardant la casse originale)
        for i, w in enumerate(config["word_filter"]["words"]):
            if w.lower() == word.lower():
                del config["word_filter"]["words"][i]
                break
        
        automod.update_server_config(interaction.guild.id, config)
        await interaction.response.send_message(f"‚úÖ Mot '{word}' retir√© du filtre", ephemeral=True)
    else:
        await interaction.response.send_message(f"‚ùå Mot '{word}' non trouv√© dans le filtre", ephemeral=True)

@automod_group.command(name="set_log_channel", description="D√©finit le salon de logs automod")
@app_commands.describe(channel="Salon pour les logs d'automod")
@app_commands.checks.has_permissions(administrator=True)
async def set_log_channel(interaction: discord.Interaction, channel: discord.TextChannel):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    config = automod.get_server_config(interaction.guild.id)
    config["log_channel"] = channel.id
    automod.update_server_config(interaction.guild.id, config)
    
    await interaction.response.send_message(f"‚úÖ Salon de logs d√©fini: {channel.mention}", ephemeral=True)

@automod_group.command(name="warnings", description="Affiche les avertissements d'un utilisateur")
@app_commands.describe(user="Utilisateur √† v√©rifier")
async def warnings(interaction: discord.Interaction, user: discord.Member):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    guild_warnings = automod.user_warnings.get(str(interaction.guild.id), {})
    user_warnings = guild_warnings.get(str(user.id), 0)
    
    embed = discord.Embed(
        title=f"‚ö†Ô∏è Avertissements - {user.display_name}",
        description=f"**Avertissements:** {user_warnings}/3",
        color=discord.Color.orange() if user_warnings > 0 else discord.Color.green()
    )
    embed.set_thumbnail(url=user.avatar.url if user.avatar else user.default_avatar.url)
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@automod_group.command(name="clear_warnings", description="Efface les avertissements d'un utilisateur")
@app_commands.describe(user="Utilisateur √† r√©initialiser")
@app_commands.checks.has_permissions(administrator=True)
async def clear_warnings(interaction: discord.Interaction, user: discord.Member):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    guild_id = str(interaction.guild.id)
    user_id = str(user.id)
    
    if guild_id in automod.user_warnings and user_id in automod.user_warnings[guild_id]:
        del automod.user_warnings[guild_id][user_id]
        await interaction.response.send_message(f"‚úÖ Avertissements effac√©s pour {user.mention}", ephemeral=True)
    else:
        await interaction.response.send_message(f"‚ùå Aucun avertissement trouv√© pour {user.mention}", ephemeral=True)

@automod_group.command(name="detect_competitors", description="D√©tecte les bots d'automod concurrents sur le serveur")
@app_commands.checks.has_permissions(administrator=True)
async def detect_competitors(interaction: discord.Interaction):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    
    # D√©tecter les bots concurrents
    competing_bots = await automod.detect_competing_bots(interaction.guild)
    
    if not competing_bots:
        embed = discord.Embed(
            title="üîç D√©tection Bots Concurrents",
            description="‚úÖ Aucun bot d'automod concurrent d√©tect√© sur ce serveur.",
            color=discord.Color.green()
        )
        await interaction.followup.send(embed=embed, ephemeral=True)
        return
    
    # Afficher les bots d√©tect√©s
    embed = discord.Embed(
        title="‚ö†Ô∏è Bots d'AutoMod Concurrents D√©tect√©s",
        description=f"**{len(competing_bots)} bot(s) concurrent(s) trouv√©(s) :**",
        color=discord.Color.orange()
    )
    
    for i, bot in enumerate(competing_bots, 1):
        perms_list = []
        for perm, has_perm in bot["permissions"].items():
            if has_perm:
                perm_emoji = {
                    "manage_messages": "üóëÔ∏è",
                    "kick_members": "üë¢", 
                    "ban_members": "üî®",
                    "manage_roles": "üé≠",
                    "moderate_members": "üîá"
                }
                perms_list.append(f"{perm_emoji.get(perm, '‚öôÔ∏è')} {perm.replace('_', ' ').title()}")
        
        embed.add_field(
            name=f"{i}. {bot['name']}",
            value=f"**Bot:** {bot['mention']}\n**Permissions:** {', '.join(perms_list) if perms_list else 'Aucune'}",
            inline=False
        )
    
    embed.add_field(
        name="üí° Que faire ?",
        value="‚Ä¢ Vous pouvez d√©sactiver manuellement les fonctions automod de ces bots\n‚Ä¢ Ou utiliser `/automod takeover` pour proposer une d√©sactivation assist√©e",
        inline=False
    )
    
    embed.set_footer(text="Arsenal AutoMod ‚Ä¢ D√©tection Concurrents")
    
    await interaction.followup.send(embed=embed, ephemeral=True)

@automod_group.command(name="check_welcome", description="V√©rifie les bots de bienvenue concurrents avant configuration")
@app_commands.checks.has_permissions(administrator=True)
async def check_welcome_bots(interaction: discord.Interaction):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    
    # D√©tecter les bots de bienvenue
    welcome_bots = await automod.detect_welcome_bots(interaction.guild)
    
    if not welcome_bots:
        embed = discord.Embed(
            title="‚úÖ Configuration Bienvenue",
            description="Aucun bot de bienvenue concurrent d√©tect√©.\nVous pouvez configurer Arsenal sans risque de doublons !",
            color=discord.Color.green()
        )
        await interaction.followup.send(embed=embed, ephemeral=True)
        return
    
    # Afficher les bots de bienvenue d√©tect√©s
    embed = discord.Embed(
        title="‚ö†Ô∏è Bots de Bienvenue D√©tect√©s",
        description=f"**{len(welcome_bots)} bot(s) de bienvenue trouv√©(s)** qui pourraient cr√©er des doublons :",
        color=discord.Color.orange()
    )
    
    for i, bot in enumerate(welcome_bots, 1):
        commands_to_disable = "\n".join([f"‚Ä¢ `{cmd}`" for cmd in bot["disable_commands"][:3]])
        
        embed.add_field(
            name=f"{i}. {bot['name']}",
            value=f"**Bot:** {bot['mention']}\n**D√©sactiver avec:**\n{commands_to_disable}",
            inline=False
        )
    
    embed.add_field(
        name="üîß Actions Recommand√©es",
        value="1Ô∏è‚É£ D√©sactivez les messages de bienvenue des bots list√©s\n2Ô∏è‚É£ Configurez ensuite Arsenal avec `/admin setup_welcome`\n3Ô∏è‚É£ Utilisez `/automod disable_welcome_bots` pour une aide d√©taill√©e",
        inline=False
    )
    
    embed.set_footer(text="Arsenal AutoMod ‚Ä¢ D√©tection Bienvenue")
    
    await interaction.followup.send(embed=embed, ephemeral=True)

@automod_group.command(name="disable_welcome_bots", description="Guide pour d√©sactiver les bots de bienvenue concurrents")
@app_commands.checks.has_permissions(administrator=True)  
async def disable_welcome_guide(interaction: discord.Interaction):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    await interaction.response.defer(ephemeral=True)
    
    welcome_bots = await automod.detect_welcome_bots(interaction.guild)
    
    if not welcome_bots:
        await interaction.followup.send("‚úÖ Aucun bot de bienvenue concurrent d√©tect√©.", ephemeral=True)
        return
    
    # Guide d√©taill√© de d√©sactivation
    embed = discord.Embed(
        title="üõ†Ô∏è Guide de D√©sactivation - Messages de Bienvenue",
        description="**Instructions d√©taill√©es pour √©viter les doublons :**",
        color=discord.Color.blue()
    )
    
    for bot in welcome_bots:
        bot_name = bot["name"]
        commands = bot["disable_commands"]
        
        commands_text = "\n".join([f"‚Ä¢ `{cmd}`" for cmd in commands])
        
        embed.add_field(
            name=f"ü§ñ {bot_name}",
            value=f"**Commandes:**\n{commands_text}",
            inline=False
        )
    
    embed.add_field(
        name="‚ö° Apr√®s D√©sactivation",
        value="1Ô∏è‚É£ Utilisez `/admin setup_welcome` pour configurer Arsenal\n2Ô∏è‚É£ Testez avec `/admin test_welcome` pour v√©rifier\n3Ô∏è‚É£ Arsenal g√©rera tous les messages de bienvenue sans doublons",
        inline=False
    )
    
    embed.add_field(
        name="üí° Conseil Pro",
        value="Gardez les autres fonctionnalit√©s de ces bots (musique, jeux, etc.)\nD√©sactivez SEULEMENT les messages de bienvenue !",
        inline=False
    )
    
    embed.set_footer(text="Arsenal AutoMod ‚Ä¢ Migration Bienvenue")
    
    await interaction.followup.send(embed=embed, ephemeral=True)

@automod_group.command(name="filter_status", description="Statut d√©taill√© du syst√®me de filtrage par niveaux")
@app_commands.checks.has_permissions(administrator=True)
async def filter_status(interaction: discord.Interaction):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    config = automod.get_server_config(interaction.guild.id)
    
    embed = discord.Embed(
        title="üõ°Ô∏è Statut Filtrage Avanc√© - Arsenal V4",
        description="**Syst√®me de filtrage par niveaux de gravit√©**",
        color=discord.Color.blue()
    )
    
    # Status g√©n√©ral
    is_enabled = config["word_filter"]["enabled"]
    advanced_enabled = config["word_filter"].get("use_advanced_filter", True)
    
    embed.add_field(
        name="üìä √âtat G√©n√©ral",
        value=f"**Filtrage:** {'üü¢ Activ√©' if is_enabled else 'üî¥ D√©sactiv√©'}\n**Syst√®me avanc√©:** {'üü¢ Activ√©' if advanced_enabled else 'üî¥ D√©sactiv√©'}",
        inline=True
    )
    
    if advanced_enabled and is_enabled:
        # Niveaux de sanctions
        level_info = [
            ("1Ô∏è‚É£ Grossi√®ret√©s l√©g√®res", config["word_filter"].get("level_1_action", "warn"), "Avertissement", len(config["word_filter"].get("level_1_words", []))),
            ("2Ô∏è‚É£ Insultes offensantes", config["word_filter"].get("level_2_action", "timeout"), f"{config['word_filter'].get('level_2_duration', 300)//60}min", len(config["word_filter"].get("level_2_words", []))),
            ("3Ô∏è‚É£ Vulgarit√©s sexuelles", config["word_filter"].get("level_3_action", "timeout"), f"{config['word_filter'].get('level_3_duration', 1800)//60}min", len(config["word_filter"].get("level_3_words", []))),
            ("4Ô∏è‚É£ Haine raciale/Extr√™me", config["word_filter"].get("level_4_action", "timeout"), f"{config['word_filter'].get('level_4_duration', 7200)//3600}h", len(config["word_filter"].get("level_4_words", [])))
        ]
        
        levels_text = "\n".join([f"{level} ‚Üí **{sanction}** ({duree}) ‚Ä¢ {count} mots" for level, action, duree, count in level_info])
        
        embed.add_field(
            name="‚öñÔ∏è Sanctions par Niveau",
            value=levels_text,
            inline=False
        )
        
        # Statistiques
        total_words = sum([info[3] for info in level_info])
        embed.add_field(
            name="üìà Statistiques",
            value=f"**Total mots surveill√©s:** {total_words}\n**Suppression auto:** {'üü¢ Oui' if config['word_filter']['auto_delete'] else 'üî¥ Non'}",
            inline=True
        )
    
    embed.set_footer(text="Arsenal V4 ‚Ä¢ Filtrage Intelligent")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)

@automod_group.command(name="configure_levels", description="Configurer les sanctions par niveau")
@app_commands.describe(
    level="Niveau √† configurer (1-4)",
    action="Type de sanction",
    duration="Dur√©e en secondes (pour timeout uniquement)"
)
@app_commands.choices(
    level=[
        app_commands.Choice(name="Niveau 1 - Grossi√®ret√©s l√©g√®res", value=1),
        app_commands.Choice(name="Niveau 2 - Insultes offensantes", value=2),
        app_commands.Choice(name="Niveau 3 - Vulgarit√©s sexuelles", value=3),
        app_commands.Choice(name="Niveau 4 - Haine raciale/Extr√™me", value=4)
    ],
    action=[
        app_commands.Choice(name="Avertissement", value="warn"),
        app_commands.Choice(name="Timeout", value="timeout"),
        app_commands.Choice(name="Kick", value="kick"),
        app_commands.Choice(name="Ban", value="ban")
    ]
)
@app_commands.checks.has_permissions(administrator=True)
async def configure_levels(interaction: discord.Interaction, level: int, action: str, duration: int = None):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    config = automod.get_server_config(interaction.guild.id)
    
    # Validation
    if level not in [1, 2, 3, 4]:
        await interaction.response.send_message("‚ùå Niveau invalide (1-4)", ephemeral=True)
        return
    
    # Configuration
    config["word_filter"][f"level_{level}_action"] = action
    
    if action == "timeout" and duration:
        config["word_filter"][f"level_{level}_duration"] = duration
    
    automod.update_server_config(interaction.guild.id, config)
    
    # Message de confirmation
    level_names = {1: "Grossi√®ret√©s l√©g√®res", 2: "Insultes offensantes", 3: "Vulgarit√©s sexuelles", 4: "Haine raciale/Extr√™me"}
    
    response = f"‚úÖ **Niveau {level}** ({level_names[level]}) configur√©:\n"
    response += f"**Action:** {action}"
    if action == "timeout" and duration:
        if duration >= 3600:
            response += f"\n**Dur√©e:** {duration//3600}h{(duration%3600)//60:02d}min"
        elif duration >= 60:
            response += f"\n**Dur√©e:** {duration//60}min{duration%60:02d}s"
        else:
            response += f"\n**Dur√©e:** {duration}s"
    
    await interaction.response.send_message(response, ephemeral=True)

@automod_group.command(name="test_filter", description="Tester le syst√®me de filtrage (sans appliquer de sanction)")
@app_commands.describe(text="Texte √† tester")
@app_commands.checks.has_permissions(administrator=True)
async def test_filter(interaction: discord.Interaction, text: str):
    automod = interaction.client.get_cog('AutoModSystem')
    if not automod:
        await interaction.response.send_message("‚ùå Syst√®me automod non charg√©", ephemeral=True)
        return
    
    config = automod.get_server_config(interaction.guild.id)
    
    if not config["word_filter"]["enabled"]:
        await interaction.response.send_message("‚ùå Le filtrage est d√©sactiv√© sur ce serveur", ephemeral=True)
        return
    
    content = text.lower()
    detected_words = []
    
    # Test des niveaux
    levels = [
        (4, "level_4_words", "üö® Haine raciale/Extr√™me"),
        (3, "level_3_words", "‚ö†Ô∏è Vulgarit√©s sexuelles"),  
        (2, "level_2_words", "üí¢ Insultes offensantes"),
        (1, "level_1_words", "üò† Grossi√®ret√©s l√©g√®res")
    ]
    
    for level_num, words_key, level_name in levels:
        words_list = config["word_filter"].get(words_key, [])
        for word in words_list:
            if word.lower() in content:
                action = config["word_filter"].get(f"level_{level_num}_action", "warn")
                duration = config["word_filter"].get(f"level_{level_num}_duration", 0)
                
                if duration > 0:
                    if duration >= 3600:
                        duration_str = f"{duration//3600}h{(duration%3600)//60:02d}min"
                    elif duration >= 60:
                        duration_str = f"{duration//60}min{duration%60:02d}s"
                    else:
                        duration_str = f"{duration}s"
                    sanction_str = f"{action} ({duration_str})"
                else:
                    sanction_str = action
                
                detected_words.append(f"{level_name}: `{word}` ‚Üí {sanction_str}")
                break  # Une seule d√©tection par niveau pour √©viter le spam
    
    if detected_words:
        embed = discord.Embed(
            title="üîç Test Filtrage - D√©tections",
            description=f"**Texte test√©:** ||{text}||\n\n**Mots d√©tect√©s:**",
            color=discord.Color.orange()
        )
        
        embed.add_field(
            name="üìù R√©sultats",
            value="\n".join(detected_words),
            inline=False
        )
        
        embed.add_field(
            name="‚ö° Action",
            value="En situation r√©elle, la sanction du niveau le plus √©lev√© serait appliqu√©e",
            inline=False
        )
    else:
        embed = discord.Embed(
            title="üîç Test Filtrage - Aucune D√©tection",
            description=f"**Texte test√©:** {text}\n\n‚úÖ Aucun mot interdit d√©tect√©",
            color=discord.Color.green()
        )
    
    embed.set_footer(text="Arsenal V4 ‚Ä¢ Test Filtrage")
    
    await interaction.response.send_message(embed=embed, ephemeral=True)


class AutoModCog(commands.Cog):
    """Cog pour le syst√®me d'automod"""
    
    def __init__(self, bot):
        self.bot = bot
        self.automod = AutoModSystem(bot)
        
    @commands.Cog.listener()
    async def on_message(self, message):
        """Traite tous les messages avec l'automod"""
        await self.automod.process_message(message)
    
    @commands.Cog.listener()
    async def on_member_join(self, member):
        """D√©tection de raid lors des arriv√©es"""
        config = self.automod.get_server_config(member.guild.id)
        if not config["raid_protection"]["enabled"]:
            return
        
        # Initialiser le compteur de raid
        current_time = time.time()
        guild_id = str(member.guild.id)
        
        if not hasattr(self.automod, 'raid_tracker'):
            self.automod.raid_tracker = {}
        
        if guild_id not in self.automod.raid_tracker:
            self.automod.raid_tracker[guild_id] = []
        
        # Ajouter la nouvelle arriv√©e
        self.automod.raid_tracker[guild_id].append(current_time)
        
        # Nettoyer les anciennes entr√©es
        time_window = config["raid_protection"]["time_window"]
        self.automod.raid_tracker[guild_id] = [
            join_time for join_time in self.automod.raid_tracker[guild_id]
            if current_time - join_time <= time_window
        ]
        
        # V√©rifier si seuil de raid atteint
        recent_joins = len(self.automod.raid_tracker[guild_id])
        max_joins = config["raid_protection"]["max_joins"]
        
        if recent_joins > max_joins:
            log.warning(f"üö® Raid d√©tect√© sur {member.guild.name}: {recent_joins} arriv√©es en {time_window}s")
            
            # Appliquer l'action anti-raid
            action = config["raid_protection"]["action"]
            
            if action == "lockdown":
                # Verrouiller le serveur (d√©sactiver les invitations)
                try:
                    for invite in await member.guild.invites():
                        await invite.delete(reason="Protection anti-raid Arsenal")
                    log.info(f"üîí Serveur {member.guild.name} verrouill√© (raid d√©tect√©)")
                except Exception as e:
                    log.error(f"‚ùå Erreur verrouillage serveur: {e}")
            
            elif action == "kick_new_members":
                # Kick les nouveaux membres r√©cents
                try:
                    await member.kick(reason="Protection anti-raid Arsenal - Arriv√©e suspecte")
                    log.info(f"üë¢ {member} expuls√© (protection anti-raid)")
                except Exception as e:
                    log.error(f"‚ùå Erreur kick anti-raid: {e}")
            
            # Log l'action
            await self.automod.log_action(
                member.guild,
                f"Protection anti-raid ({action})",
                member,
                f"Raid d√©tect√©: {recent_joins} arriv√©es en {time_window}s"
            )

async def setup(bot):
    """Setup du cog automod"""
    await bot.add_cog(AutoModCog(bot))
    
    # Ajouter les commandes slash
    bot.tree.add_command(automod_group)
    
    log.info("üõ°Ô∏è Syst√®me AutoMod charg√© avec succ√®s")
