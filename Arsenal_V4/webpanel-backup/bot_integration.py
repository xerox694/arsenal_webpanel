"""
ü§ñ Arsenal Bot Integration pour WebPanel
Int√©gration compl√®te du bot Discord avec le panel web
"""
import discord
from discord.ext import commands
import asyncio
import aiohttp
import json
import sqlite3
from datetime import datetime
import sys
import os

# Configuration du bot
BOT_TOKEN = "VOTRE_TOKEN_BOT_ICI"  # √Ä remplacer par votre vrai token
BOT_PREFIX = "!"

class ArsenalBot:
    def __init__(self):
        # Intents Discord
        intents = discord.Intents.default()
        intents.message_content = True
        intents.members = True
        intents.guilds = True
        
        # Initialisation du bot
        self.bot = commands.Bot(command_prefix=BOT_PREFIX, intents=intents)
        self.setup_events()
        self.setup_commands()
        
        # Base de donn√©es
        self.db_path = "arsenal_v4.db"
        self.init_database()
    
    def init_database(self):
        """Initialise la base de donn√©es pour l'int√©gration bot"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Table pour les logs de commandes
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS command_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                username TEXT,
                command TEXT,
                server_id TEXT,
                server_name TEXT,
                timestamp DATETIME,
                success BOOLEAN
            )
        ''')
        
        # Table pour les statistiques en temps r√©el
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS bot_stats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                stat_type TEXT,
                value INTEGER,
                timestamp DATETIME
            )
        ''')
        
        # Table pour les serveurs connect√©s
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS connected_servers (
                server_id TEXT PRIMARY KEY,
                server_name TEXT,
                member_count INTEGER,
                connected_at DATETIME,
                last_activity DATETIME
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def setup_events(self):
        """Configuration des √©v√©nements du bot"""
        
        @self.bot.event
        async def on_ready():
            print(f'ü§ñ {self.bot.user} est connect√© et pr√™t!')
            print(f'üìä Connect√© √† {len(self.bot.guilds)} serveurs')
            
            # Mettre √† jour les statistiques
            await self.update_server_stats()
            
            # D√©marrer la mise √† jour automatique
            self.bot.loop.create_task(self.auto_update_stats())
        
        @self.bot.event
        async def on_guild_join(guild):
            """Quand le bot rejoint un serveur"""
            await self.add_server_to_db(guild)
            print(f'‚ûï Ajout√© au serveur: {guild.name} ({guild.id})')
        
        @self.bot.event
        async def on_guild_remove(guild):
            """Quand le bot quitte un serveur"""
            await self.remove_server_from_db(guild.id)
            print(f'‚ûñ Retir√© du serveur: {guild.name} ({guild.id})')
        
        @self.bot.event
        async def on_command(ctx):
            """Log toutes les commandes ex√©cut√©es"""
            await self.log_command(ctx, success=True)
        
        @self.bot.event
        async def on_command_error(ctx, error):
            """Log les erreurs de commandes"""
            await self.log_command(ctx, success=False)
            print(f'‚ùå Erreur commande: {error}')
    
    def setup_commands(self):
        """Configuration des commandes du bot"""
        
        @self.bot.command(name='play')
        async def play(ctx, *, query=None):
            """Commande pour jouer de la musique"""
            if not query:
                await ctx.send("‚ùå Veuillez sp√©cifier une chanson √† jouer!")
                return
            
            embed = discord.Embed(
                title="üéµ Musique",
                description=f"Recherche de: `{query}`",
                color=0x00ff88
            )
            await ctx.send(embed=embed)
            
            # Mettre √† jour les stats
            await self.update_music_stats()
        
        @self.bot.command(name='skip')
        async def skip(ctx):
            """Passer la chanson actuelle"""
            embed = discord.Embed(
                title="‚è≠Ô∏è Musique",
                description="Chanson pass√©e!",
                color=0x0088ff
            )
            await ctx.send(embed=embed)
        
        @self.bot.command(name='queue')
        async def queue(ctx):
            """Afficher la file d'attente"""
            embed = discord.Embed(
                title="üìú File d'attente",
                description="Aucune chanson en attente",
                color=0xffaa00
            )
            await ctx.send(embed=embed)
        
        @self.bot.command(name='ban')
        @commands.has_permissions(ban_members=True)
        async def ban(ctx, member: discord.Member, *, reason="Aucune raison sp√©cifi√©e"):
            """Bannir un membre"""
            try:
                await member.ban(reason=reason)
                embed = discord.Embed(
                    title="üî® Mod√©ration",
                    description=f"{member.mention} a √©t√© banni.\nRaison: {reason}",
                    color=0xff4444
                )
                await ctx.send(embed=embed)
                
                # Log dans la base de donn√©es
                await self.log_moderation_action("ban", member, ctx.author, reason)
                
            except Exception as e:
                await ctx.send(f"‚ùå Erreur lors du bannissement: {e}")
        
        @self.bot.command(name='kick')
        @commands.has_permissions(kick_members=True)
        async def kick(ctx, member: discord.Member, *, reason="Aucune raison sp√©cifi√©e"):
            """Expulser un membre"""
            try:
                await member.kick(reason=reason)
                embed = discord.Embed(
                    title="üë¢ Mod√©ration",
                    description=f"{member.mention} a √©t√© expuls√©.\nRaison: {reason}",
                    color=0xffaa00
                )
                await ctx.send(embed=embed)
                
                # Log dans la base de donn√©es
                await self.log_moderation_action("kick", member, ctx.author, reason)
                
            except Exception as e:
                await ctx.send(f"‚ùå Erreur lors de l'expulsion: {e}")
        
        @self.bot.command(name='panel')
        async def panel(ctx):
            """Lien vers le panel web"""
            embed = discord.Embed(
                title="üåê Arsenal V4 Web Panel",
                description="Acc√©dez au panel de contr√¥le web d'Arsenal!",
                color=0x00ff88
            )
            embed.add_field(
                name="Lien d'acc√®s",
                value="[Cliquez ici pour acc√©der](http://localhost:8080)",
                inline=False
            )
            embed.add_field(
                name="Fonctionnalit√©s",
                value="‚Ä¢ Statistiques en temps r√©el\n‚Ä¢ Gestion des serveurs\n‚Ä¢ Logs des commandes\n‚Ä¢ Contr√¥le musical",
                inline=False
            )
            await ctx.send(embed=embed)
        
        @self.bot.command(name='stats')
        async def stats(ctx):
            """Statistiques du bot"""
            stats = await self.get_bot_stats()
            
            embed = discord.Embed(
                title="üìä Statistiques Arsenal V4",
                color=0x00ff88
            )
            embed.add_field(name="Serveurs", value=stats['servers'], inline=True)
            embed.add_field(name="Utilisateurs", value=stats['users'], inline=True)
            embed.add_field(name="Commandes (24h)", value=stats['commands_24h'], inline=True)
            
            await ctx.send(embed=embed)
    
    async def log_command(self, ctx, success):
        """Log une commande dans la base de donn√©es"""
        try:
            # Log local dans SQLite
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO command_logs 
                (user_id, username, command, server_id, server_name, timestamp, success)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                str(ctx.author.id),
                str(ctx.author),
                ctx.command.name if ctx.command else "unknown",
                str(ctx.guild.id) if ctx.guild else "DM",
                ctx.guild.name if ctx.guild else "Direct Message",
                datetime.now(),
                success
            ))
            
            conn.commit()
            conn.close()
            
            # Envoyer aussi au webpanel via API
            await self.send_to_webpanel({
                'user_id': str(ctx.author.id),
                'username': str(ctx.author),
                'command': ctx.command.name if ctx.command else "unknown",
                'server_id': str(ctx.guild.id) if ctx.guild else "DM",
                'server_name': ctx.guild.name if ctx.guild else "Direct Message",
                'success': success
            })
            
        except Exception as e:
            print(f"‚ùå Erreur log command: {e}")
    
    async def send_to_webpanel(self, data):
        """Envoyer des donn√©es au webpanel"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post('http://localhost:5000/api/commands/log', json=data) as resp:
                    if resp.status == 200:
                        print(f"‚úÖ Donn√©es envoy√©es au webpanel: {data['command']}")
                    else:
                        print(f"‚ùå Erreur webpanel: {resp.status}")
        except Exception as e:
            print(f"‚ùå Connexion webpanel √©chou√©e: {e}")
    
    async def update_server_stats_to_webpanel(self):
        """Envoyer les stats des serveurs au webpanel"""
        try:
            for guild in self.bot.guilds:
                server_data = {
                    'server_id': str(guild.id),
                    'server_name': guild.name,
                    'member_count': guild.member_count,
                    'connected_at': datetime.now().isoformat(),
                    'last_activity': datetime.now().isoformat()
                }
                
                async with aiohttp.ClientSession() as session:
                    async with session.post('http://localhost:5000/api/servers/update', json=server_data) as resp:
                        if resp.status == 200:
                            print(f"‚úÖ Stats serveur {guild.name} envoy√©es")
        except Exception as e:
            print(f"‚ùå Erreur stats serveurs: {e}")
    
    async def log_moderation_action(self, action_type, target, moderator, reason):
        """Log une action de mod√©ration"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO command_logs 
            (user_id, username, command, server_id, server_name, timestamp, success)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            str(target.id),
            f"{action_type}: {target} par {moderator}",
            action_type,
            str(target.guild.id),
            target.guild.name,
            datetime.now(),
            True
        ))
        
        conn.commit()
        conn.close()
    
    async def update_server_stats(self):
        """Mettre √† jour les statistiques des serveurs"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        for guild in self.bot.guilds:
            cursor.execute('''
                INSERT OR REPLACE INTO connected_servers 
                (server_id, server_name, member_count, connected_at, last_activity)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                str(guild.id),
                guild.name,
                guild.member_count,
                datetime.now(),
                datetime.now()
            ))
        
        conn.commit()
        conn.close()
    
    async def add_server_to_db(self, guild):
        """Ajouter un serveur √† la base de donn√©es"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO connected_servers 
            (server_id, server_name, member_count, connected_at, last_activity)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            str(guild.id),
            guild.name,
            guild.member_count,
            datetime.now(),
            datetime.now()
        ))
        
        conn.commit()
        conn.close()
    
    async def remove_server_from_db(self, guild_id):
        """Retirer un serveur de la base de donn√©es"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('DELETE FROM connected_servers WHERE server_id = ?', (str(guild_id),))
        
        conn.commit()
        conn.close()
    
    async def update_music_stats(self):
        """Mettre √† jour les statistiques musicales"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO bot_stats (stat_type, value, timestamp)
            VALUES (?, ?, ?)
        ''', ("music_play", 1, datetime.now()))
        
        conn.commit()
        conn.close()
    
    async def get_bot_stats(self):
        """R√©cup√©rer les statistiques du bot"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Nombre de serveurs
        servers = len(self.bot.guilds)
        
        # Nombre total d'utilisateurs
        users = sum(guild.member_count for guild in self.bot.guilds)
        
        # Commandes des derni√®res 24h
        cursor.execute('''
            SELECT COUNT(*) FROM command_logs 
            WHERE timestamp > datetime('now', '-1 day')
        ''')
        commands_24h = cursor.fetchone()[0]
        
        conn.close()
        
        return {
            'servers': servers,
            'users': users,
            'commands_24h': commands_24h
        }
    
    async def auto_update_stats(self):
        """Mise √† jour automatique des statistiques"""
        while True:
            try:
                await asyncio.sleep(300)  # Toutes les 5 minutes
                await self.update_server_stats()
                print("üìä Statistiques mises √† jour")
            except Exception as e:
                print(f"‚ùå Erreur mise √† jour stats: {e}")
    
    def run(self):
        """D√©marrer le bot"""
        try:
            print("üöÄ D√©marrage du bot Arsenal V4...")
            self.bot.run(BOT_TOKEN)
        except Exception as e:
            print(f"‚ùå Erreur d√©marrage bot: {e}")
            print("üí° V√©rifiez votre token Discord!")

# Point d'entr√©e
if __name__ == "__main__":
    arsenal_bot = ArsenalBot()
    arsenal_bot.run()
